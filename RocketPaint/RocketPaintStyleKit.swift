//
//  RocketPaintStyleKit.swift
//  ProjectName
//
//  Created by Glenn Barnett on 7/8/16.
//  Copyright (c) 2016 Impresario Digital. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class RocketPaintStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let gradYellow1: UIColor = UIColor(red: 1.000, green: 0.937, blue: 0.000, alpha: 0.700)
        static let gradYellow2: UIColor = UIColor(red: 0.991, green: 1.000, blue: 0.640, alpha: 0.750)
        static let gradGreen1: UIColor = UIColor(red: 0.350, green: 1.000, blue: 0.226, alpha: 0.700)
        static let gradGreen2: UIColor = UIColor(red: 0.814, green: 1.000, blue: 0.672, alpha: 0.700)
        static let gradRed1: UIColor = UIColor(red: 1.000, green: 0.454, blue: 0.214, alpha: 0.700)
        static let gradRed2: UIColor = UIColor(red: 1.000, green: 0.539, blue: 0.423, alpha: 0.750)
        static let yellow: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [RocketPaintStyleKit.gradYellow1.CGColor, RocketPaintStyleKit.gradYellow2.CGColor], [0, 1])!
        static let green: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [RocketPaintStyleKit.gradGreen1.CGColor, RocketPaintStyleKit.gradGreen2.CGColor], [0, 1])!
        static let red: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [RocketPaintStyleKit.gradRed1.CGColor, RocketPaintStyleKit.gradRed2.CGColor], [0, 1])!
    }

    //// Colors

    public class var gradYellow1: UIColor { return Cache.gradYellow1 }
    public class var gradYellow2: UIColor { return Cache.gradYellow2 }
    public class var gradGreen1: UIColor { return Cache.gradGreen1 }
    public class var gradGreen2: UIColor { return Cache.gradGreen2 }
    public class var gradRed1: UIColor { return Cache.gradRed1 }
    public class var gradRed2: UIColor { return Cache.gradRed2 }

    //// Gradients

    public class var yellow: CGGradient { return Cache.yellow }
    public class var green: CGGradient { return Cache.green }
    public class var red: CGGradient { return Cache.red }

    //// Drawing Methods

    public class func drawLine4(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 34.83, y: 19.96))
        bezierPath.addCurveToPoint(CGPoint(x: 82.58, y: 58.04), controlPoint1: CGPoint(x: 82.58, y: 58.04), controlPoint2: CGPoint(x: 82.58, y: 58.04))
        iconColor.setStroke()
        bezierPath.lineWidth = 12
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 35.71, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawLine3(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 34.83, y: 19.96))
        bezierPath.addCurveToPoint(CGPoint(x: 82.58, y: 58.04), controlPoint1: CGPoint(x: 82.58, y: 58.04), controlPoint2: CGPoint(x: 82.58, y: 58.04))
        iconColor.setStroke()
        bezierPath.lineWidth = 6
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 35.71, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawLine2(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 34.83, y: 19.96))
        bezierPath.addCurveToPoint(CGPoint(x: 82.58, y: 58.04), controlPoint1: CGPoint(x: 82.58, y: 58.04), controlPoint2: CGPoint(x: 82.58, y: 58.04))
        iconColor.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 35.71, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawLine1(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 34.83, y: 19.96))
        bezierPath.addCurveToPoint(CGPoint(x: 82.58, y: 58.04), controlPoint1: CGPoint(x: 82.58, y: 58.04), controlPoint2: CGPoint(x: 82.58, y: 58.04))
        iconColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 35.71, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawTextSansSmall(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 82.58, 57.68)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        textSelColor.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 36, y: 19, width: 43, height: 37)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.buttonFontSize()), NSForegroundColorAttributeName: iconColor, NSParagraphStyleAttributeName: textStyle]

        "Aa".drawInRect(textRect, withAttributes: textFontAttributes)
    }

    public class func drawTextSansBig(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 82.58, 57.68)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        textSelColor.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 36, y: 14, width: 43, height: 37)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(36), NSForegroundColorAttributeName: iconColor, NSParagraphStyleAttributeName: textStyle]

        "Aa".drawInRect(textRect, withAttributes: textFontAttributes)
    }

    public class func drawTextSerifSmall(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 82.58, 57.68)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        textSelColor.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 36, y: 19, width: 43, height: 37)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Georgia", size: UIFont.buttonFontSize())!, NSForegroundColorAttributeName: iconColor, NSParagraphStyleAttributeName: textStyle]

        "Aa".drawInRect(textRect, withAttributes: textFontAttributes)
    }

    public class func drawTextSerifBig(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 82.58, 57.68)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        textSelColor.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 78, y: 56.5, width: 9, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 1.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 36, y: 16, width: 42, height: 36)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Georgia", size: 35)!, NSForegroundColorAttributeName: iconColor, NSParagraphStyleAttributeName: textStyle]

        "Aa".drawInRect(textRect, withAttributes: textFontAttributes)
    }

    public class func drawBox(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 82.58, 57.68)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        iconColor.setFill()
        rectangle2Path.fill()

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 33.95, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPen1(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, oval2Path.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let oval2OpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, oval2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 36.52, y: 20.32))
        bezierPath.addCurveToPoint(CGPoint(x: 48.7, y: 37.91), controlPoint1: CGPoint(x: 22.71, y: 60.04), controlPoint2: CGPoint(x: 48.7, y: 37.91))
        bezierPath.addCurveToPoint(CGPoint(x: 66.09, y: 48.79), controlPoint1: CGPoint(x: 48.7, y: 37.91), controlPoint2: CGPoint(x: 67.86, y: 17.96))
        bezierPath.addCurveToPoint(CGPoint(x: 82.4, y: 57.86), controlPoint1: CGPoint(x: 64.32, y: 79.63), controlPoint2: CGPoint(x: 82.4, y: 57.86))
        iconColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 35.71, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)


        //// Cross 2
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle4Path.fill()




        //// Oval 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 35.71, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval3Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval3Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPen2(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, oval2Path.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let oval2OpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, oval2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 36.52, y: 20.32))
        bezierPath.addCurveToPoint(CGPoint(x: 48.7, y: 37.91), controlPoint1: CGPoint(x: 22.71, y: 60.04), controlPoint2: CGPoint(x: 48.7, y: 37.91))
        bezierPath.addCurveToPoint(CGPoint(x: 66.09, y: 48.79), controlPoint1: CGPoint(x: 48.7, y: 37.91), controlPoint2: CGPoint(x: 67.86, y: 17.96))
        bezierPath.addCurveToPoint(CGPoint(x: 82.4, y: 57.86), controlPoint1: CGPoint(x: 64.32, y: 79.63), controlPoint2: CGPoint(x: 82.4, y: 57.86))
        iconColor.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 35.71, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)


        //// Cross 2
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle4Path.fill()




        //// Oval 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 35.71, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval3Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval3Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPen3(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, oval2Path.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let oval2OpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, oval2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 36.52, y: 20.32))
        bezierPath.addCurveToPoint(CGPoint(x: 48.7, y: 37.91), controlPoint1: CGPoint(x: 22.71, y: 60.04), controlPoint2: CGPoint(x: 48.7, y: 37.91))
        bezierPath.addCurveToPoint(CGPoint(x: 66.09, y: 48.79), controlPoint1: CGPoint(x: 48.7, y: 37.91), controlPoint2: CGPoint(x: 67.86, y: 17.96))
        bezierPath.addCurveToPoint(CGPoint(x: 82.4, y: 57.86), controlPoint1: CGPoint(x: 64.32, y: 79.63), controlPoint2: CGPoint(x: 82.4, y: 57.86))
        iconColor.setStroke()
        bezierPath.lineWidth = 6
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 36.41, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)


        //// Cross 2
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle4Path.fill()
    }

    public class func drawPen4(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, oval2Path.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let oval2OpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, oval2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 36.52, y: 20.32))
        bezierPath.addCurveToPoint(CGPoint(x: 48.7, y: 37.91), controlPoint1: CGPoint(x: 22.71, y: 60.04), controlPoint2: CGPoint(x: 48.7, y: 37.91))
        bezierPath.addCurveToPoint(CGPoint(x: 66.09, y: 48.79), controlPoint1: CGPoint(x: 48.7, y: 37.91), controlPoint2: CGPoint(x: 67.86, y: 17.96))
        bezierPath.addCurveToPoint(CGPoint(x: 82.4, y: 57.86), controlPoint1: CGPoint(x: 64.32, y: 79.63), controlPoint2: CGPoint(x: 82.4, y: 57.86))
        iconColor.setStroke()
        bezierPath.lineWidth = 12
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 54, width: 2.5, height: 8))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 35.71, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)


        //// Cross 2
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 2.5))
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 81.5, y: 54, width: 2.5, height: 8))
        UIColor.whiteColor().setFill()
        rectangle4Path.fill()




        //// Oval 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 35.71, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval3Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval3Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPalette(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 48.17, y: 21.34))
        bezierPath.addCurveToPoint(CGPoint(x: 47.69, y: 21.37), controlPoint1: CGPoint(x: 48.01, y: 21.34), controlPoint2: CGPoint(x: 47.85, y: 21.35))
        bezierPath.addCurveToPoint(CGPoint(x: 44.22, y: 24.79), controlPoint1: CGPoint(x: 45.73, y: 21.58), controlPoint2: CGPoint(x: 44.22, y: 23.03))
        bezierPath.addCurveToPoint(CGPoint(x: 48.17, y: 28.24), controlPoint1: CGPoint(x: 44.22, y: 26.69), controlPoint2: CGPoint(x: 45.99, y: 28.24))
        bezierPath.addCurveToPoint(CGPoint(x: 52.13, y: 24.79), controlPoint1: CGPoint(x: 50.36, y: 28.24), controlPoint2: CGPoint(x: 52.13, y: 26.69))
        bezierPath.addCurveToPoint(CGPoint(x: 48.17, y: 21.34), controlPoint1: CGPoint(x: 52.13, y: 22.88), controlPoint2: CGPoint(x: 50.36, y: 21.34))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 59.83, y: 29.96))
        bezierPath.addCurveToPoint(CGPoint(x: 58.99, y: 30.04), controlPoint1: CGPoint(x: 59.54, y: 29.96), controlPoint2: CGPoint(x: 59.26, y: 29.99))
        bezierPath.addCurveToPoint(CGPoint(x: 55.87, y: 33.41), controlPoint1: CGPoint(x: 57.21, y: 30.37), controlPoint2: CGPoint(x: 55.87, y: 31.75))
        bezierPath.addCurveToPoint(CGPoint(x: 59.83, y: 36.85), controlPoint1: CGPoint(x: 55.87, y: 35.31), controlPoint2: CGPoint(x: 57.64, y: 36.85))
        bezierPath.addCurveToPoint(CGPoint(x: 63.78, y: 33.41), controlPoint1: CGPoint(x: 62.01, y: 36.85), controlPoint2: CGPoint(x: 63.78, y: 35.31))
        bezierPath.addCurveToPoint(CGPoint(x: 59.83, y: 29.96), controlPoint1: CGPoint(x: 63.78, y: 31.5), controlPoint2: CGPoint(x: 62.01, y: 29.96))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 40.27, y: 30.39))
        bezierPath.addCurveToPoint(CGPoint(x: 36.32, y: 33.84), controlPoint1: CGPoint(x: 38.08, y: 30.39), controlPoint2: CGPoint(x: 36.32, y: 31.93))
        bezierPath.addCurveToPoint(CGPoint(x: 40.27, y: 37.29), controlPoint1: CGPoint(x: 36.32, y: 35.74), controlPoint2: CGPoint(x: 38.08, y: 37.29))
        bezierPath.addCurveToPoint(CGPoint(x: 44.22, y: 33.84), controlPoint1: CGPoint(x: 42.45, y: 37.29), controlPoint2: CGPoint(x: 44.22, y: 35.74))
        bezierPath.addCurveToPoint(CGPoint(x: 41.25, y: 30.5), controlPoint1: CGPoint(x: 44.22, y: 32.23), controlPoint2: CGPoint(x: 42.96, y: 30.88))
        bezierPath.addCurveToPoint(CGPoint(x: 40.27, y: 30.39), controlPoint1: CGPoint(x: 40.94, y: 30.43), controlPoint2: CGPoint(x: 40.61, y: 30.39))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 45.68, y: 41.16))
        bezierPath.addCurveToPoint(CGPoint(x: 41.72, y: 44.61), controlPoint1: CGPoint(x: 43.49, y: 41.16), controlPoint2: CGPoint(x: 41.72, y: 42.71))
        bezierPath.addCurveToPoint(CGPoint(x: 45.68, y: 48.06), controlPoint1: CGPoint(x: 41.72, y: 46.52), controlPoint2: CGPoint(x: 43.49, y: 48.06))
        bezierPath.addCurveToPoint(CGPoint(x: 49.63, y: 44.61), controlPoint1: CGPoint(x: 47.86, y: 48.06), controlPoint2: CGPoint(x: 49.63, y: 46.52))
        bezierPath.addCurveToPoint(CGPoint(x: 46.93, y: 41.34), controlPoint1: CGPoint(x: 49.63, y: 43.09), controlPoint2: CGPoint(x: 48.5, y: 41.8))
        bezierPath.addCurveToPoint(CGPoint(x: 45.68, y: 41.16), controlPoint1: CGPoint(x: 46.54, y: 41.23), controlPoint2: CGPoint(x: 46.12, y: 41.16))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 55.25, y: 48.06))
        bezierPath.addCurveToPoint(CGPoint(x: 51.3, y: 51.51), controlPoint1: CGPoint(x: 53.07, y: 48.06), controlPoint2: CGPoint(x: 51.3, y: 49.6))
        bezierPath.addCurveToPoint(CGPoint(x: 55.25, y: 54.95), controlPoint1: CGPoint(x: 51.3, y: 53.41), controlPoint2: CGPoint(x: 53.07, y: 54.95))
        bezierPath.addCurveToPoint(CGPoint(x: 59.2, y: 51.51), controlPoint1: CGPoint(x: 57.43, y: 54.95), controlPoint2: CGPoint(x: 59.2, y: 53.41))
        bezierPath.addCurveToPoint(CGPoint(x: 56.23, y: 48.17), controlPoint1: CGPoint(x: 59.2, y: 49.9), controlPoint2: CGPoint(x: 57.94, y: 48.55))
        bezierPath.addCurveToPoint(CGPoint(x: 55.25, y: 48.06), controlPoint1: CGPoint(x: 55.91, y: 48.1), controlPoint2: CGPoint(x: 55.59, y: 48.06))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 58.12, y: 15.95))
        bezierPath.addCurveToPoint(CGPoint(x: 68.44, y: 18.52), controlPoint1: CGPoint(x: 61.5, y: 16.28), controlPoint2: CGPoint(x: 64.99, y: 17.12))
        bezierPath.addCurveToPoint(CGPoint(x: 77.93, y: 26.94), controlPoint1: CGPoint(x: 75.25, y: 21.27), controlPoint2: CGPoint(x: 78.34, y: 23.06))
        bezierPath.addCurveToPoint(CGPoint(x: 68.36, y: 32.11), controlPoint1: CGPoint(x: 77.59, y: 30.05), controlPoint2: CGPoint(x: 66.3, y: 25.73))
        bezierPath.addCurveToPoint(CGPoint(x: 80.42, y: 39.87), controlPoint1: CGPoint(x: 69.56, y: 35.85), controlPoint2: CGPoint(x: 76.59, y: 35.88))
        bezierPath.addCurveToPoint(CGPoint(x: 83.34, y: 48.49), controlPoint1: CGPoint(x: 83.13, y: 42.69), controlPoint2: CGPoint(x: 83.75, y: 46.34))
        bezierPath.addCurveToPoint(CGPoint(x: 52.86, y: 59.87), controlPoint1: CGPoint(x: 81.67, y: 57.11), controlPoint2: CGPoint(x: 67.85, y: 65.92))
        bezierPath.addCurveToPoint(CGPoint(x: 33.52, y: 28.23), controlPoint1: CGPoint(x: 37.87, y: 53.81), controlPoint2: CGPoint(x: 29.21, y: 39.64))
        bezierPath.addCurveToPoint(CGPoint(x: 43.81, y: 17.93), controlPoint1: CGPoint(x: 35.29, y: 23.51), controlPoint2: CGPoint(x: 39.01, y: 20))
        bezierPath.addCurveToPoint(CGPoint(x: 44.21, y: 17.76), controlPoint1: CGPoint(x: 43.94, y: 17.87), controlPoint2: CGPoint(x: 44.07, y: 17.82))
        bezierPath.addCurveToPoint(CGPoint(x: 58.12, y: 15.95), controlPoint1: CGPoint(x: 48.27, y: 16.1), controlPoint2: CGPoint(x: 53.07, y: 15.45))
        bezierPath.closePath()
        iconColor.setFill()
        bezierPath.fill()
    }

    public class func drawUndo() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Polygon Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.72, 48.04)
        CGContextRotateCTM(context, -150 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPoint(x: 9.94, y: -0))
        polygonPath.addLineToPoint(CGPoint(x: 18.54, y: 15.98))
        polygonPath.addLineToPoint(CGPoint(x: 1.33, y: 15.98))
        polygonPath.closePath()
        utilityIconColor.setFill()
        polygonPath.fill()

        CGContextRestoreGState(context)


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.blackColor().setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 80.65, y: 38.82))
        bezier4Path.addCurveToPoint(CGPoint(x: 57.65, y: 62.58), controlPoint1: CGPoint(x: 80.65, y: 51.94), controlPoint2: CGPoint(x: 70.35, y: 62.58))
        bezier4Path.addCurveToPoint(CGPoint(x: 46.74, y: 59.74), controlPoint1: CGPoint(x: 53.7, y: 62.58), controlPoint2: CGPoint(x: 49.98, y: 61.55))
        bezier4Path.addCurveToPoint(CGPoint(x: 50.89, y: 51.33), controlPoint1: CGPoint(x: 48.41, y: 56.47), controlPoint2: CGPoint(x: 49.78, y: 53.69))
        bezier4Path.addCurveToPoint(CGPoint(x: 57.65, y: 53.15), controlPoint1: CGPoint(x: 52.89, y: 52.49), controlPoint2: CGPoint(x: 55.2, y: 53.15))
        bezier4Path.addCurveToPoint(CGPoint(x: 71.52, y: 38.82), controlPoint1: CGPoint(x: 65.31, y: 53.15), controlPoint2: CGPoint(x: 71.52, y: 46.73))
        bezier4Path.addCurveToPoint(CGPoint(x: 57.65, y: 24.49), controlPoint1: CGPoint(x: 71.52, y: 30.91), controlPoint2: CGPoint(x: 65.31, y: 24.49))
        bezier4Path.addCurveToPoint(CGPoint(x: 49.39, y: 27.3), controlPoint1: CGPoint(x: 54.56, y: 24.49), controlPoint2: CGPoint(x: 51.7, y: 25.54))
        bezier4Path.addCurveToPoint(CGPoint(x: 45.04, y: 32.84), controlPoint1: CGPoint(x: 47.53, y: 28.73), controlPoint2: CGPoint(x: 46.02, y: 30.64))
        bezier4Path.addCurveToPoint(CGPoint(x: 36.82, y: 28.73), controlPoint1: CGPoint(x: 42.43, y: 31.54), controlPoint2: CGPoint(x: 39.59, y: 30.11))
        bezier4Path.addCurveToPoint(CGPoint(x: 42.45, y: 20.99), controlPoint1: CGPoint(x: 38.17, y: 25.76), controlPoint2: CGPoint(x: 40.1, y: 23.13))
        bezier4Path.addCurveToPoint(CGPoint(x: 44.61, y: 19.25), controlPoint1: CGPoint(x: 43.14, y: 20.36), controlPoint2: CGPoint(x: 43.86, y: 19.78))
        bezier4Path.addCurveToPoint(CGPoint(x: 57.65, y: 15.06), controlPoint1: CGPoint(x: 48.31, y: 16.6), controlPoint2: CGPoint(x: 52.81, y: 15.06))
        bezier4Path.addCurveToPoint(CGPoint(x: 80.65, y: 38.82), controlPoint1: CGPoint(x: 70.35, y: 15.06), controlPoint2: CGPoint(x: 80.65, y: 25.7))
        bezier4Path.closePath()
        utilityIconColor.setFill()
        bezier4Path.fill()
    }

    public class func drawRedo() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Polygon Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 83.44, 53.89)
        CGContextRotateCTM(context, 150 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPoint(x: -4.22, y: 9.68))
        polygonPath.addLineToPoint(CGPoint(x: -13.08, y: 26.09))
        polygonPath.addLineToPoint(CGPoint(x: 4.65, y: 26.09))
        polygonPath.closePath()
        utilityIconColor.setFill()
        polygonPath.fill()

        CGContextRestoreGState(context)


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 35, y: 38.82))
        bezier4Path.addCurveToPoint(CGPoint(x: 58, y: 62.58), controlPoint1: CGPoint(x: 35, y: 51.94), controlPoint2: CGPoint(x: 45.3, y: 62.58))
        bezier4Path.addCurveToPoint(CGPoint(x: 68.91, y: 59.74), controlPoint1: CGPoint(x: 61.95, y: 62.58), controlPoint2: CGPoint(x: 65.67, y: 61.55))
        bezier4Path.addCurveToPoint(CGPoint(x: 64.76, y: 51.33), controlPoint1: CGPoint(x: 67.23, y: 56.47), controlPoint2: CGPoint(x: 65.87, y: 53.69))
        bezier4Path.addCurveToPoint(CGPoint(x: 58, y: 53.15), controlPoint1: CGPoint(x: 62.76, y: 52.49), controlPoint2: CGPoint(x: 60.45, y: 53.15))
        bezier4Path.addCurveToPoint(CGPoint(x: 44.13, y: 38.82), controlPoint1: CGPoint(x: 50.34, y: 53.15), controlPoint2: CGPoint(x: 44.13, y: 46.73))
        bezier4Path.addCurveToPoint(CGPoint(x: 58, y: 24.49), controlPoint1: CGPoint(x: 44.13, y: 30.91), controlPoint2: CGPoint(x: 50.34, y: 24.49))
        bezier4Path.addCurveToPoint(CGPoint(x: 66.26, y: 27.3), controlPoint1: CGPoint(x: 61.09, y: 24.49), controlPoint2: CGPoint(x: 63.95, y: 25.54))
        bezier4Path.addCurveToPoint(CGPoint(x: 70.61, y: 32.84), controlPoint1: CGPoint(x: 68.12, y: 28.73), controlPoint2: CGPoint(x: 69.63, y: 30.64))
        bezier4Path.addCurveToPoint(CGPoint(x: 78.83, y: 28.73), controlPoint1: CGPoint(x: 73.22, y: 31.54), controlPoint2: CGPoint(x: 76.06, y: 30.11))
        bezier4Path.addCurveToPoint(CGPoint(x: 73.2, y: 20.99), controlPoint1: CGPoint(x: 77.48, y: 25.76), controlPoint2: CGPoint(x: 75.55, y: 23.13))
        bezier4Path.addCurveToPoint(CGPoint(x: 71.04, y: 19.25), controlPoint1: CGPoint(x: 72.51, y: 20.36), controlPoint2: CGPoint(x: 71.79, y: 19.78))
        bezier4Path.addCurveToPoint(CGPoint(x: 58, y: 15.06), controlPoint1: CGPoint(x: 67.33, y: 16.6), controlPoint2: CGPoint(x: 62.84, y: 15.06))
        bezier4Path.addCurveToPoint(CGPoint(x: 35, y: 38.82), controlPoint1: CGPoint(x: 45.3, y: 15.06), controlPoint2: CGPoint(x: 35, y: 25.7))
        bezier4Path.closePath()
        utilityIconColor.setFill()
        bezier4Path.fill()
    }

    public class func drawSaveToPhotos() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Polygon Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 65.21, 68.51)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPoint(x: -5, y: 9.68))
        polygonPath.addLineToPoint(CGPoint(x: -15.52, y: 28.21))
        polygonPath.addLineToPoint(CGPoint(x: 5.52, y: 28.21))
        polygonPath.closePath()
        utilityIconColor.setFill()
        polygonPath.fill()

        CGContextRestoreGState(context)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 65, y: 18, width: 11, height: 23))
        utilityIconColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 47, y: 66, width: 46, height: 6), cornerRadius: 3)
        utilityIconColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 47, y: 59, width: 46, height: 6), cornerRadius: 3)
        utilityIconColor.setFill()
        rectangle3Path.fill()
    }

    public class func drawLoadFromPhotos() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Polygon Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 65.21, 54.92)
        CGContextRotateCTM(context, 180 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPoint(x: -5, y: 34.39))
        polygonPath.addLineToPoint(CGPoint(x: -15.52, y: 15.86))
        polygonPath.addLineToPoint(CGPoint(x: 5.52, y: 15.86))
        polygonPath.closePath()
        utilityIconColor.setFill()
        polygonPath.fill()

        CGContextRestoreGState(context)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 65, y: 35, width: 11, height: 22))
        utilityIconColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 47, y: 66, width: 46, height: 6), cornerRadius: 3)
        utilityIconColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 47, y: 59, width: 46, height: 6), cornerRadius: 3)
        utilityIconColor.setFill()
        rectangle3Path.fill()
    }

    public class func drawHighlightGreen() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 82.75, 57.5)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        CGContextSaveGState(context)
        rectangle2Path.addClip()
        CGContextDrawLinearGradient(context, RocketPaintStyleKit.green, CGPoint(x: 24.58, y: -0), CGPoint(x: 24.58, y: 37.36), CGGradientDrawingOptions())
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 78, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 1, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 33.95, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawHighlightYellow() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 81.87, 56.96)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        CGContextSaveGState(context)
        rectangle2Path.addClip()
        CGContextDrawLinearGradient(context, RocketPaintStyleKit.yellow, CGPoint(x: 24.58, y: -0), CGPoint(x: 24.58, y: 37.36), CGGradientDrawingOptions())
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 33.95, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawHighlightRed() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 82.58, 57.68)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        CGContextSaveGState(context)
        rectangle2Path.addClip()
        CGContextDrawLinearGradient(context, RocketPaintStyleKit.red, CGPoint(x: 24.58, y: -0), CGPoint(x: 24.58, y: 37.36), CGGradientDrawingOptions())
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 33.95, 18.04)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPaletteColor(paletteItemColor paletteItemColor: UIColor = UIColor(red: 0.541, green: 1.000, blue: 0.745, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let paletteOuter = NSShadow()
        paletteOuter.shadowColor = UIColor.blackColor().colorWithAlphaComponent(0.25)
        paletteOuter.shadowOffset = CGSize(width: 3.1, height: 3.1)
        paletteOuter.shadowBlurRadius = 5

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 81, height: 63))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, paletteOuter.shadowOffset, paletteOuter.shadowBlurRadius, (paletteOuter.shadowColor as! UIColor).CGColor)
        paletteItemColor.setFill()
        ovalPath.fill()
        CGContextRestoreGState(context)
    }

    public class func drawHamburger(rotation rotation: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 112, height: 74))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 58, 39)
        CGContextRotateCTM(context, -rotation * CGFloat(M_PI) / 180)



        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: -19, y: 10, width: 38, height: 7), cornerRadius: 3.5)
        utilityIconColor.setFill()
        rectangle3Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: -19, y: -3, width: 38, height: 6), cornerRadius: 3)
        utilityIconColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -19, y: -17, width: 38, height: 7), cornerRadius: 3.5)
        utilityIconColor.setFill()
        rectangle2Path.fill()



        CGContextRestoreGState(context)
    }

}
