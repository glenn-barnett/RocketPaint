//
//  RocketPaintStyleKit.swift
//  ProjectName
//
//  Created by Glenn Barnett on 6/30/16.
//  Copyright (c) 2016 Impresario Digital. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class RocketPaintStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let gradYellow1: UIColor = UIColor(red: 1.000, green: 0.937, blue: 0.000, alpha: 0.700)
        static let gradYellow2: UIColor = UIColor(red: 0.991, green: 1.000, blue: 0.640, alpha: 0.750)
        static let gradGreen1: UIColor = UIColor(red: 0.350, green: 1.000, blue: 0.226, alpha: 0.700)
        static let gradGreen2: UIColor = UIColor(red: 0.814, green: 1.000, blue: 0.672, alpha: 0.700)
        static let gradRed1: UIColor = UIColor(red: 1.000, green: 0.454, blue: 0.214, alpha: 0.700)
        static let gradRed2: UIColor = UIColor(red: 1.000, green: 0.539, blue: 0.423, alpha: 0.750)
        static let yellow: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [RocketPaintStyleKit.gradYellow1.CGColor, RocketPaintStyleKit.gradYellow2.CGColor], [0, 1])!
        static let green: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [RocketPaintStyleKit.gradGreen1.CGColor, RocketPaintStyleKit.gradGreen2.CGColor], [0, 1])!
        static let red: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [RocketPaintStyleKit.gradRed1.CGColor, RocketPaintStyleKit.gradRed2.CGColor], [0, 1])!
    }

    //// Colors

    public class var gradYellow1: UIColor { return Cache.gradYellow1 }
    public class var gradYellow2: UIColor { return Cache.gradYellow2 }
    public class var gradGreen1: UIColor { return Cache.gradGreen1 }
    public class var gradGreen2: UIColor { return Cache.gradGreen2 }
    public class var gradRed1: UIColor { return Cache.gradRed1 }
    public class var gradRed2: UIColor { return Cache.gradRed2 }

    //// Gradients

    public class var yellow: CGGradient { return Cache.yellow }
    public class var green: CGGradient { return Cache.green }
    public class var red: CGGradient { return Cache.red }

    //// Drawing Methods

    public class func drawLine4(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 41.86, y: 22.38))
        bezierPath.addCurveToPoint(CGPoint(x: 99.84, y: 65.62), controlPoint1: CGPoint(x: 99.84, y: 65.62), controlPoint2: CGPoint(x: 99.84, y: 65.62))
        iconColor.setStroke()
        bezierPath.lineWidth = 12
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.93, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawLine3(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 41.86, y: 22.38))
        bezierPath.addCurveToPoint(CGPoint(x: 99.84, y: 65.62), controlPoint1: CGPoint(x: 99.84, y: 65.62), controlPoint2: CGPoint(x: 99.84, y: 65.62))
        iconColor.setStroke()
        bezierPath.lineWidth = 6
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.93, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawLine2(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 41.86, y: 22.38))
        bezierPath.addCurveToPoint(CGPoint(x: 99.84, y: 65.62), controlPoint1: CGPoint(x: 99.84, y: 65.62), controlPoint2: CGPoint(x: 99.84, y: 65.62))
        iconColor.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.93, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawLine1(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 41.86, y: 22.38))
        bezierPath.addCurveToPoint(CGPoint(x: 99.84, y: 65.62), controlPoint1: CGPoint(x: 99.84, y: 65.62), controlPoint2: CGPoint(x: 99.84, y: 65.62))
        iconColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.93, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawTextSansSmall(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 99.84, 65.21)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 59.69, height: 42.41))
        textSelColor.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 43, y: 21, width: 52, height: 42)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.buttonFontSize()), NSForegroundColorAttributeName: iconColor, NSParagraphStyleAttributeName: textStyle]

        "Aa".drawInRect(textRect, withAttributes: textFontAttributes)
    }

    public class func drawTextSansBig(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 99.84, 65.21)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 59.69, height: 42.41))
        textSelColor.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 43, y: 16, width: 52, height: 42)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(40), NSForegroundColorAttributeName: iconColor, NSParagraphStyleAttributeName: textStyle]

        "Aa".drawInRect(textRect, withAttributes: textFontAttributes)
    }

    public class func drawTextSerifSmall(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 99.84, 65.21)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 59.69, height: 42.41))
        textSelColor.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 43, y: 21, width: 52, height: 42)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Georgia", size: UIFont.buttonFontSize())!, NSForegroundColorAttributeName: iconColor, NSParagraphStyleAttributeName: textStyle]

        "Aa".drawInRect(textRect, withAttributes: textFontAttributes)
    }

    public class func drawTextSerifBig(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 146, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 107.04, 65.21)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 64.08, height: 42.41))
        textSelColor.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 101, y: 63.5, width: 12, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 105.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 46, y: 18, width: 55, height: 41)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Georgia", size: 40)!, NSForegroundColorAttributeName: iconColor, NSParagraphStyleAttributeName: textStyle]

        "Aa".drawInRect(textRect, withAttributes: textFontAttributes)
    }

    public class func drawBox(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 99.84, 65.21)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 59.69, height: 42.41))
        iconColor.setFill()
        rectangle2Path.fill()

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 40.8, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPen1(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, oval2Path.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let oval2OpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, oval2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 43.92, y: 22.79))
        bezierPath.addCurveToPoint(CGPoint(x: 58.7, y: 42.76), controlPoint1: CGPoint(x: 27.15, y: 67.88), controlPoint2: CGPoint(x: 58.7, y: 42.76))
        bezierPath.addCurveToPoint(CGPoint(x: 79.82, y: 55.12), controlPoint1: CGPoint(x: 58.7, y: 42.76), controlPoint2: CGPoint(x: 81.98, y: 20.12))
        bezierPath.addCurveToPoint(CGPoint(x: 99.63, y: 65.41), controlPoint1: CGPoint(x: 77.67, y: 90.12), controlPoint2: CGPoint(x: 99.63, y: 65.41))
        iconColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.93, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)


        //// Cross 2
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle4Path.fill()




        //// Oval 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.93, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval3Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval3Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPen2(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, oval2Path.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let oval2OpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, oval2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 43.92, y: 22.79))
        bezierPath.addCurveToPoint(CGPoint(x: 58.7, y: 42.76), controlPoint1: CGPoint(x: 27.15, y: 67.88), controlPoint2: CGPoint(x: 58.7, y: 42.76))
        bezierPath.addCurveToPoint(CGPoint(x: 79.82, y: 55.12), controlPoint1: CGPoint(x: 58.7, y: 42.76), controlPoint2: CGPoint(x: 81.98, y: 20.12))
        bezierPath.addCurveToPoint(CGPoint(x: 99.63, y: 65.41), controlPoint1: CGPoint(x: 77.67, y: 90.12), controlPoint2: CGPoint(x: 99.63, y: 65.41))
        iconColor.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.93, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)


        //// Cross 2
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle4Path.fill()




        //// Oval 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.93, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval3Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval3Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPen3(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, oval2Path.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let oval2OpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, oval2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 43.92, y: 22.79))
        bezierPath.addCurveToPoint(CGPoint(x: 58.7, y: 42.76), controlPoint1: CGPoint(x: 27.15, y: 67.88), controlPoint2: CGPoint(x: 58.7, y: 42.76))
        bezierPath.addCurveToPoint(CGPoint(x: 79.82, y: 55.12), controlPoint1: CGPoint(x: 58.7, y: 42.76), controlPoint2: CGPoint(x: 81.98, y: 20.12))
        bezierPath.addCurveToPoint(CGPoint(x: 99.63, y: 65.41), controlPoint1: CGPoint(x: 77.67, y: 90.12), controlPoint2: CGPoint(x: 99.63, y: 65.41))
        iconColor.setStroke()
        bezierPath.lineWidth = 6
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 43.78, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)


        //// Cross 2
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle4Path.fill()
    }

    public class func drawPen4(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, oval2Path.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let oval2OpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, oval2OpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        oval2Path.lineWidth = 2
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 43.92, y: 22.79))
        bezierPath.addCurveToPoint(CGPoint(x: 58.7, y: 42.76), controlPoint1: CGPoint(x: 27.15, y: 67.88), controlPoint2: CGPoint(x: 58.7, y: 42.76))
        bezierPath.addCurveToPoint(CGPoint(x: 79.82, y: 55.12), controlPoint1: CGPoint(x: 58.7, y: 42.76), controlPoint2: CGPoint(x: 81.98, y: 20.12))
        bezierPath.addCurveToPoint(CGPoint(x: 99.63, y: 65.41), controlPoint1: CGPoint(x: 77.67, y: 90.12), controlPoint2: CGPoint(x: 99.63, y: 65.41))
        iconColor.setStroke()
        bezierPath.lineWidth = 12
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.93, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)


        //// Cross 2
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle4Path.fill()




        //// Oval 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 42.93, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval3Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval3Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPalette(iconColor iconColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 58.07, y: 23.95))
        bezierPath.addCurveToPoint(CGPoint(x: 57.48, y: 23.98), controlPoint1: CGPoint(x: 57.87, y: 23.95), controlPoint2: CGPoint(x: 57.67, y: 23.96))
        bezierPath.addCurveToPoint(CGPoint(x: 53.27, y: 27.87), controlPoint1: CGPoint(x: 55.1, y: 24.22), controlPoint2: CGPoint(x: 53.27, y: 25.87))
        bezierPath.addCurveToPoint(CGPoint(x: 58.07, y: 31.78), controlPoint1: CGPoint(x: 53.27, y: 30.03), controlPoint2: CGPoint(x: 55.42, y: 31.78))
        bezierPath.addCurveToPoint(CGPoint(x: 62.87, y: 27.87), controlPoint1: CGPoint(x: 60.72, y: 31.78), controlPoint2: CGPoint(x: 62.87, y: 30.03))
        bezierPath.addCurveToPoint(CGPoint(x: 58.07, y: 23.95), controlPoint1: CGPoint(x: 62.87, y: 25.71), controlPoint2: CGPoint(x: 60.72, y: 23.95))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 72.22, y: 33.74))
        bezierPath.addCurveToPoint(CGPoint(x: 71.2, y: 33.83), controlPoint1: CGPoint(x: 71.87, y: 33.74), controlPoint2: CGPoint(x: 71.53, y: 33.77))
        bezierPath.addCurveToPoint(CGPoint(x: 67.42, y: 37.65), controlPoint1: CGPoint(x: 69.04, y: 34.21), controlPoint2: CGPoint(x: 67.42, y: 35.78))
        bezierPath.addCurveToPoint(CGPoint(x: 72.22, y: 41.56), controlPoint1: CGPoint(x: 67.42, y: 39.81), controlPoint2: CGPoint(x: 69.57, y: 41.56))
        bezierPath.addCurveToPoint(CGPoint(x: 77.02, y: 37.65), controlPoint1: CGPoint(x: 74.87, y: 41.56), controlPoint2: CGPoint(x: 77.02, y: 39.81))
        bezierPath.addCurveToPoint(CGPoint(x: 72.22, y: 33.74), controlPoint1: CGPoint(x: 77.02, y: 35.49), controlPoint2: CGPoint(x: 74.87, y: 33.74))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 48.47, y: 34.23))
        bezierPath.addCurveToPoint(CGPoint(x: 43.67, y: 38.14), controlPoint1: CGPoint(x: 45.82, y: 34.23), controlPoint2: CGPoint(x: 43.67, y: 35.98))
        bezierPath.addCurveToPoint(CGPoint(x: 48.47, y: 42.05), controlPoint1: CGPoint(x: 43.67, y: 40.3), controlPoint2: CGPoint(x: 45.82, y: 42.05))
        bezierPath.addCurveToPoint(CGPoint(x: 53.27, y: 38.14), controlPoint1: CGPoint(x: 51.12, y: 42.05), controlPoint2: CGPoint(x: 53.27, y: 40.3))
        bezierPath.addCurveToPoint(CGPoint(x: 49.66, y: 34.35), controlPoint1: CGPoint(x: 53.27, y: 36.32), controlPoint2: CGPoint(x: 51.74, y: 34.78))
        bezierPath.addCurveToPoint(CGPoint(x: 48.47, y: 34.23), controlPoint1: CGPoint(x: 49.28, y: 34.27), controlPoint2: CGPoint(x: 48.88, y: 34.23))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 55.04, y: 46.46))
        bezierPath.addCurveToPoint(CGPoint(x: 50.24, y: 50.37), controlPoint1: CGPoint(x: 52.39, y: 46.46), controlPoint2: CGPoint(x: 50.24, y: 48.21))
        bezierPath.addCurveToPoint(CGPoint(x: 55.04, y: 54.28), controlPoint1: CGPoint(x: 50.24, y: 52.53), controlPoint2: CGPoint(x: 52.39, y: 54.28))
        bezierPath.addCurveToPoint(CGPoint(x: 59.84, y: 50.37), controlPoint1: CGPoint(x: 57.69, y: 54.28), controlPoint2: CGPoint(x: 59.84, y: 52.53))
        bezierPath.addCurveToPoint(CGPoint(x: 56.56, y: 46.66), controlPoint1: CGPoint(x: 59.84, y: 48.64), controlPoint2: CGPoint(x: 58.47, y: 47.18))
        bezierPath.addCurveToPoint(CGPoint(x: 55.04, y: 46.46), controlPoint1: CGPoint(x: 56.08, y: 46.53), controlPoint2: CGPoint(x: 55.57, y: 46.46))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 66.66, y: 54.28))
        bezierPath.addCurveToPoint(CGPoint(x: 61.86, y: 58.2), controlPoint1: CGPoint(x: 64.01, y: 54.28), controlPoint2: CGPoint(x: 61.86, y: 56.04))
        bezierPath.addCurveToPoint(CGPoint(x: 66.66, y: 62.11), controlPoint1: CGPoint(x: 61.86, y: 60.36), controlPoint2: CGPoint(x: 64.01, y: 62.11))
        bezierPath.addCurveToPoint(CGPoint(x: 71.46, y: 58.2), controlPoint1: CGPoint(x: 69.31, y: 62.11), controlPoint2: CGPoint(x: 71.46, y: 60.36))
        bezierPath.addCurveToPoint(CGPoint(x: 67.85, y: 54.4), controlPoint1: CGPoint(x: 71.46, y: 56.37), controlPoint2: CGPoint(x: 69.92, y: 54.84))
        bezierPath.addCurveToPoint(CGPoint(x: 66.66, y: 54.28), controlPoint1: CGPoint(x: 67.47, y: 54.33), controlPoint2: CGPoint(x: 67.07, y: 54.28))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 70.15, y: 17.83))
        bezierPath.addCurveToPoint(CGPoint(x: 82.68, y: 20.75), controlPoint1: CGPoint(x: 74.25, y: 18.21), controlPoint2: CGPoint(x: 78.49, y: 19.16))
        bezierPath.addCurveToPoint(CGPoint(x: 94.2, y: 30.31), controlPoint1: CGPoint(x: 90.95, y: 23.87), controlPoint2: CGPoint(x: 94.7, y: 25.91))
        bezierPath.addCurveToPoint(CGPoint(x: 82.58, y: 36.18), controlPoint1: CGPoint(x: 93.79, y: 33.84), controlPoint2: CGPoint(x: 80.07, y: 28.94))
        bezierPath.addCurveToPoint(CGPoint(x: 97.23, y: 44.99), controlPoint1: CGPoint(x: 84.04, y: 40.43), controlPoint2: CGPoint(x: 92.58, y: 40.46))
        bezierPath.addCurveToPoint(CGPoint(x: 100.77, y: 54.77), controlPoint1: CGPoint(x: 100.52, y: 48.19), controlPoint2: CGPoint(x: 101.27, y: 52.33))
        bezierPath.addCurveToPoint(CGPoint(x: 63.76, y: 67.69), controlPoint1: CGPoint(x: 98.74, y: 64.56), controlPoint2: CGPoint(x: 81.96, y: 74.56))
        bezierPath.addCurveToPoint(CGPoint(x: 40.27, y: 31.77), controlPoint1: CGPoint(x: 45.56, y: 60.81), controlPoint2: CGPoint(x: 35.05, y: 44.73))
        bezierPath.addCurveToPoint(CGPoint(x: 52.77, y: 20.08), controlPoint1: CGPoint(x: 42.43, y: 26.42), controlPoint2: CGPoint(x: 46.94, y: 22.43))
        bezierPath.addCurveToPoint(CGPoint(x: 53.25, y: 19.89), controlPoint1: CGPoint(x: 52.93, y: 20.02), controlPoint2: CGPoint(x: 53.09, y: 19.95))
        bezierPath.addCurveToPoint(CGPoint(x: 70.15, y: 17.83), controlPoint1: CGPoint(x: 58.18, y: 18.01), controlPoint2: CGPoint(x: 64.01, y: 17.27))
        bezierPath.closePath()
        iconColor.setFill()
        bezierPath.fill()
    }

    public class func drawUndo() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Polygon Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 51.74, 55.22)
        CGContextRotateCTM(context, -150 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPoint(x: 12.24, y: -0))
        polygonPath.addLineToPoint(CGPoint(x: 22.83, y: 18.96))
        polygonPath.addLineToPoint(CGPoint(x: 1.64, y: 18.96))
        polygonPath.closePath()
        utilityIconColor.setFill()
        polygonPath.fill()

        CGContextRestoreGState(context)


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.blackColor().setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 97.5, y: 43.79))
        bezier4Path.addCurveToPoint(CGPoint(x: 69.57, y: 70.76), controlPoint1: CGPoint(x: 97.5, y: 58.69), controlPoint2: CGPoint(x: 85, y: 70.76))
        bezier4Path.addCurveToPoint(CGPoint(x: 56.32, y: 67.54), controlPoint1: CGPoint(x: 64.78, y: 70.76), controlPoint2: CGPoint(x: 60.27, y: 69.6))
        bezier4Path.addCurveToPoint(CGPoint(x: 61.37, y: 58), controlPoint1: CGPoint(x: 58.36, y: 63.83), controlPoint2: CGPoint(x: 60.02, y: 60.68))
        bezier4Path.addCurveToPoint(CGPoint(x: 69.57, y: 60.06), controlPoint1: CGPoint(x: 63.8, y: 59.31), controlPoint2: CGPoint(x: 66.59, y: 60.06))
        bezier4Path.addCurveToPoint(CGPoint(x: 86.41, y: 43.79), controlPoint1: CGPoint(x: 78.87, y: 60.06), controlPoint2: CGPoint(x: 86.41, y: 52.78))
        bezier4Path.addCurveToPoint(CGPoint(x: 69.57, y: 27.53), controlPoint1: CGPoint(x: 86.41, y: 34.81), controlPoint2: CGPoint(x: 78.87, y: 27.53))
        bezier4Path.addCurveToPoint(CGPoint(x: 59.55, y: 30.72), controlPoint1: CGPoint(x: 65.82, y: 27.53), controlPoint2: CGPoint(x: 62.35, y: 28.72))
        bezier4Path.addCurveToPoint(CGPoint(x: 54.27, y: 37.01), controlPoint1: CGPoint(x: 57.28, y: 32.35), controlPoint2: CGPoint(x: 55.46, y: 34.51))
        bezier4Path.addCurveToPoint(CGPoint(x: 44.28, y: 32.34), controlPoint1: CGPoint(x: 51.1, y: 35.53), controlPoint2: CGPoint(x: 47.65, y: 33.91))
        bezier4Path.addCurveToPoint(CGPoint(x: 51.12, y: 23.55), controlPoint1: CGPoint(x: 45.92, y: 28.97), controlPoint2: CGPoint(x: 48.26, y: 25.98))
        bezier4Path.addCurveToPoint(CGPoint(x: 53.74, y: 21.58), controlPoint1: CGPoint(x: 51.95, y: 22.84), controlPoint2: CGPoint(x: 52.83, y: 22.18))
        bezier4Path.addCurveToPoint(CGPoint(x: 69.57, y: 16.82), controlPoint1: CGPoint(x: 58.24, y: 18.58), controlPoint2: CGPoint(x: 63.69, y: 16.82))
        bezier4Path.addCurveToPoint(CGPoint(x: 97.5, y: 43.79), controlPoint1: CGPoint(x: 85, y: 16.82), controlPoint2: CGPoint(x: 97.5, y: 28.9))
        bezier4Path.closePath()
        utilityIconColor.setFill()
        bezier4Path.fill()
    }

    public class func drawRedo() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Polygon Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 99.56, 59.7)
        CGContextRotateCTM(context, 150 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPoint(x: -4.88, y: 9.68))
        polygonPath.addLineToPoint(CGPoint(x: -15.15, y: 28.11))
        polygonPath.addLineToPoint(CGPoint(x: 5.39, y: 28.11))
        polygonPath.closePath()
        utilityIconColor.setFill()
        polygonPath.fill()

        CGContextRestoreGState(context)


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 42.08, y: 43.79))
        bezier4Path.addCurveToPoint(CGPoint(x: 70, y: 70.76), controlPoint1: CGPoint(x: 42.08, y: 58.69), controlPoint2: CGPoint(x: 54.58, y: 70.76))
        bezier4Path.addCurveToPoint(CGPoint(x: 83.25, y: 67.54), controlPoint1: CGPoint(x: 74.79, y: 70.76), controlPoint2: CGPoint(x: 79.31, y: 69.6))
        bezier4Path.addCurveToPoint(CGPoint(x: 78.21, y: 58), controlPoint1: CGPoint(x: 81.21, y: 63.83), controlPoint2: CGPoint(x: 79.55, y: 60.68))
        bezier4Path.addCurveToPoint(CGPoint(x: 70, y: 60.06), controlPoint1: CGPoint(x: 75.78, y: 59.31), controlPoint2: CGPoint(x: 72.98, y: 60.06))
        bezier4Path.addCurveToPoint(CGPoint(x: 53.16, y: 43.79), controlPoint1: CGPoint(x: 60.7, y: 60.06), controlPoint2: CGPoint(x: 53.16, y: 52.78))
        bezier4Path.addCurveToPoint(CGPoint(x: 70, y: 27.53), controlPoint1: CGPoint(x: 53.16, y: 34.81), controlPoint2: CGPoint(x: 60.7, y: 27.53))
        bezier4Path.addCurveToPoint(CGPoint(x: 80.02, y: 30.72), controlPoint1: CGPoint(x: 73.76, y: 27.53), controlPoint2: CGPoint(x: 77.22, y: 28.72))
        bezier4Path.addCurveToPoint(CGPoint(x: 85.31, y: 37.01), controlPoint1: CGPoint(x: 82.29, y: 32.35), controlPoint2: CGPoint(x: 84.12, y: 34.51))
        bezier4Path.addCurveToPoint(CGPoint(x: 95.29, y: 32.34), controlPoint1: CGPoint(x: 88.48, y: 35.53), controlPoint2: CGPoint(x: 91.93, y: 33.91))
        bezier4Path.addCurveToPoint(CGPoint(x: 88.45, y: 23.55), controlPoint1: CGPoint(x: 93.65, y: 28.97), controlPoint2: CGPoint(x: 91.31, y: 25.98))
        bezier4Path.addCurveToPoint(CGPoint(x: 85.83, y: 21.58), controlPoint1: CGPoint(x: 87.62, y: 22.84), controlPoint2: CGPoint(x: 86.75, y: 22.18))
        bezier4Path.addCurveToPoint(CGPoint(x: 70, y: 16.82), controlPoint1: CGPoint(x: 81.33, y: 18.58), controlPoint2: CGPoint(x: 75.88, y: 16.82))
        bezier4Path.addCurveToPoint(CGPoint(x: 42.08, y: 43.79), controlPoint1: CGPoint(x: 54.58, y: 16.82), controlPoint2: CGPoint(x: 42.08, y: 28.9))
        bezier4Path.closePath()
        utilityIconColor.setFill()
        bezier4Path.fill()
    }

    public class func drawSaveToPhotos() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Polygon Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 65.21, 68.51)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPoint(x: -5, y: 9.68))
        polygonPath.addLineToPoint(CGPoint(x: -15.52, y: 28.21))
        polygonPath.addLineToPoint(CGPoint(x: 5.52, y: 28.21))
        polygonPath.closePath()
        utilityIconColor.setFill()
        polygonPath.fill()

        CGContextRestoreGState(context)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 65, y: 18, width: 11, height: 23))
        utilityIconColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 47, y: 66, width: 46, height: 6), cornerRadius: 3)
        utilityIconColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 47, y: 59, width: 46, height: 6), cornerRadius: 3)
        utilityIconColor.setFill()
        rectangle3Path.fill()
    }

    public class func drawLoadFromPhotos() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Polygon Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 65.21, 54.92)
        CGContextRotateCTM(context, 180 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.moveToPoint(CGPoint(x: -5, y: 34.39))
        polygonPath.addLineToPoint(CGPoint(x: -15.52, y: 15.86))
        polygonPath.addLineToPoint(CGPoint(x: 5.52, y: 15.86))
        polygonPath.closePath()
        utilityIconColor.setFill()
        polygonPath.fill()

        CGContextRestoreGState(context)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 65, y: 35, width: 11, height: 22))
        utilityIconColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 47, y: 66, width: 46, height: 6), cornerRadius: 3)
        utilityIconColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 47, y: 59, width: 46, height: 6), cornerRadius: 3)
        utilityIconColor.setFill()
        rectangle3Path.fill()
    }

    public class func drawBox2() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 100.06, 65)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 59.69, height: 42.41))
        CGContextSaveGState(context)
        rectangle2Path.addClip()
        CGContextDrawLinearGradient(context, RocketPaintStyleKit.green, CGPoint(x: 29.84, y: -0), CGPoint(x: 29.84, y: 42.41), CGGradientDrawingOptions())
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 40.8, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawBox3() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 98.99, 64.38)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 59.69, height: 42.41))
        CGContextSaveGState(context)
        rectangle2Path.addClip()
        CGContextDrawLinearGradient(context, RocketPaintStyleKit.yellow, CGPoint(x: 29.84, y: -0), CGPoint(x: 29.84, y: 42.41), CGGradientDrawingOptions())
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 40.8, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawBox4() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)
        let textSelColor = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 99.84, 65.21)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 59.69, height: 42.41))
        CGContextSaveGState(context)
        rectangle2Path.addClip()
        CGContextDrawLinearGradient(context, RocketPaintStyleKit.red, CGPoint(x: 29.84, y: -0), CGPoint(x: 29.84, y: 42.41), CGGradientDrawingOptions())
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 95, y: 63.5, width: 10, height: 2.5))
        UIColor.whiteColor().setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 98.5, y: 60, width: 2.5, height: 10))
        UIColor.whiteColor().setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 40.8, 20.01)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 4.26, height: 4.26))
        textSelColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPaletteColor(paletteItemColor paletteItemColor: UIColor = UIColor(red: 0.541, green: 1.000, blue: 0.745, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let paletteOuter = NSShadow()
        paletteOuter.shadowColor = UIColor.blackColor().colorWithAlphaComponent(0.25)
        paletteOuter.shadowOffset = CGSize(width: 3.1, height: 3.1)
        paletteOuter.shadowBlurRadius = 5
        let paletteColorInner = NSShadow()
        paletteColorInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.56)
        paletteColorInner.shadowOffset = CGSize(width: 6.1, height: 5.1)
        paletteColorInner.shadowBlurRadius = 23

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 81, height: 63))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, paletteOuter.shadowOffset, paletteOuter.shadowBlurRadius, (paletteOuter.shadowColor as! UIColor).CGColor)
        paletteItemColor.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((paletteColorInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (paletteColorInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, paletteColorInner.shadowOffset, paletteColorInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()
    }

    public class func drawHamburger() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let ovalFill = UIColor(red: 0.761, green: 0.743, blue: 0.727, alpha: 0.335)
        let ovalOutlineColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 0.605)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.whiteColor().colorWithAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 136, height: 84))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        ovalFill.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, ovalPath.bounds)
        CGContextSetShadow(context, CGSize.zero, 0)
        CGContextSetAlpha(context, CGColorGetAlpha((ovalInner.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, ovalInner.shadowOffset, ovalInner.shadowBlurRadius, ovalOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)

        ovalOutlineColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 47, y: 56, width: 46, height: 8), cornerRadius: 4)
        utilityIconColor.setFill()
        rectangle3Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 47, y: 40, width: 46, height: 8), cornerRadius: 4)
        utilityIconColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 47, y: 24, width: 46, height: 8), cornerRadius: 4)
        utilityIconColor.setFill()
        rectangle2Path.fill()
    }

}
