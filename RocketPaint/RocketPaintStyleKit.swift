//
//  RocketPaintStyleKit.swift
//  ProjectName
//
//  Created by Glenn Barnett on 8/29/16.
//  Copyright (c) 2016 Impresario Digital. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

open class RocketPaintStyleKit : NSObject {

    //// Drawing Methods

    open class func drawPalette(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalGrid()
        context.restoreGState()


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 48.17, y: 21.34))
        bezierPath.addCurve(to: CGPoint(x: 47.69, y: 21.37), controlPoint1: CGPoint(x: 48.01, y: 21.34), controlPoint2: CGPoint(x: 47.85, y: 21.35))
        bezierPath.addCurve(to: CGPoint(x: 44.22, y: 24.79), controlPoint1: CGPoint(x: 45.73, y: 21.58), controlPoint2: CGPoint(x: 44.22, y: 23.03))
        bezierPath.addCurve(to: CGPoint(x: 48.17, y: 28.24), controlPoint1: CGPoint(x: 44.22, y: 26.69), controlPoint2: CGPoint(x: 45.99, y: 28.24))
        bezierPath.addCurve(to: CGPoint(x: 52.13, y: 24.79), controlPoint1: CGPoint(x: 50.36, y: 28.24), controlPoint2: CGPoint(x: 52.13, y: 26.69))
        bezierPath.addCurve(to: CGPoint(x: 48.17, y: 21.34), controlPoint1: CGPoint(x: 52.13, y: 22.88), controlPoint2: CGPoint(x: 50.36, y: 21.34))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 59.83, y: 29.96))
        bezierPath.addCurve(to: CGPoint(x: 58.99, y: 30.04), controlPoint1: CGPoint(x: 59.54, y: 29.96), controlPoint2: CGPoint(x: 59.26, y: 29.99))
        bezierPath.addCurve(to: CGPoint(x: 55.87, y: 33.41), controlPoint1: CGPoint(x: 57.21, y: 30.37), controlPoint2: CGPoint(x: 55.87, y: 31.75))
        bezierPath.addCurve(to: CGPoint(x: 59.83, y: 36.85), controlPoint1: CGPoint(x: 55.87, y: 35.31), controlPoint2: CGPoint(x: 57.64, y: 36.85))
        bezierPath.addCurve(to: CGPoint(x: 63.78, y: 33.41), controlPoint1: CGPoint(x: 62.01, y: 36.85), controlPoint2: CGPoint(x: 63.78, y: 35.31))
        bezierPath.addCurve(to: CGPoint(x: 59.83, y: 29.96), controlPoint1: CGPoint(x: 63.78, y: 31.5), controlPoint2: CGPoint(x: 62.01, y: 29.96))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 40.27, y: 30.39))
        bezierPath.addCurve(to: CGPoint(x: 36.32, y: 33.84), controlPoint1: CGPoint(x: 38.08, y: 30.39), controlPoint2: CGPoint(x: 36.32, y: 31.93))
        bezierPath.addCurve(to: CGPoint(x: 40.27, y: 37.29), controlPoint1: CGPoint(x: 36.32, y: 35.74), controlPoint2: CGPoint(x: 38.08, y: 37.29))
        bezierPath.addCurve(to: CGPoint(x: 44.22, y: 33.84), controlPoint1: CGPoint(x: 42.45, y: 37.29), controlPoint2: CGPoint(x: 44.22, y: 35.74))
        bezierPath.addCurve(to: CGPoint(x: 41.25, y: 30.5), controlPoint1: CGPoint(x: 44.22, y: 32.23), controlPoint2: CGPoint(x: 42.96, y: 30.88))
        bezierPath.addCurve(to: CGPoint(x: 40.27, y: 30.39), controlPoint1: CGPoint(x: 40.94, y: 30.43), controlPoint2: CGPoint(x: 40.61, y: 30.39))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 45.68, y: 41.16))
        bezierPath.addCurve(to: CGPoint(x: 41.72, y: 44.61), controlPoint1: CGPoint(x: 43.49, y: 41.16), controlPoint2: CGPoint(x: 41.72, y: 42.71))
        bezierPath.addCurve(to: CGPoint(x: 45.68, y: 48.06), controlPoint1: CGPoint(x: 41.72, y: 46.52), controlPoint2: CGPoint(x: 43.49, y: 48.06))
        bezierPath.addCurve(to: CGPoint(x: 49.63, y: 44.61), controlPoint1: CGPoint(x: 47.86, y: 48.06), controlPoint2: CGPoint(x: 49.63, y: 46.52))
        bezierPath.addCurve(to: CGPoint(x: 46.93, y: 41.34), controlPoint1: CGPoint(x: 49.63, y: 43.09), controlPoint2: CGPoint(x: 48.5, y: 41.8))
        bezierPath.addCurve(to: CGPoint(x: 45.68, y: 41.16), controlPoint1: CGPoint(x: 46.54, y: 41.23), controlPoint2: CGPoint(x: 46.12, y: 41.16))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 55.25, y: 48.06))
        bezierPath.addCurve(to: CGPoint(x: 51.3, y: 51.51), controlPoint1: CGPoint(x: 53.07, y: 48.06), controlPoint2: CGPoint(x: 51.3, y: 49.6))
        bezierPath.addCurve(to: CGPoint(x: 55.25, y: 54.95), controlPoint1: CGPoint(x: 51.3, y: 53.41), controlPoint2: CGPoint(x: 53.07, y: 54.95))
        bezierPath.addCurve(to: CGPoint(x: 59.2, y: 51.51), controlPoint1: CGPoint(x: 57.43, y: 54.95), controlPoint2: CGPoint(x: 59.2, y: 53.41))
        bezierPath.addCurve(to: CGPoint(x: 56.23, y: 48.17), controlPoint1: CGPoint(x: 59.2, y: 49.9), controlPoint2: CGPoint(x: 57.94, y: 48.55))
        bezierPath.addCurve(to: CGPoint(x: 55.25, y: 48.06), controlPoint1: CGPoint(x: 55.91, y: 48.1), controlPoint2: CGPoint(x: 55.59, y: 48.06))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 58.12, y: 15.95))
        bezierPath.addCurve(to: CGPoint(x: 68.44, y: 18.52), controlPoint1: CGPoint(x: 61.5, y: 16.28), controlPoint2: CGPoint(x: 64.99, y: 17.12))
        bezierPath.addCurve(to: CGPoint(x: 77.93, y: 26.94), controlPoint1: CGPoint(x: 75.25, y: 21.27), controlPoint2: CGPoint(x: 78.34, y: 23.06))
        bezierPath.addCurve(to: CGPoint(x: 68.36, y: 32.11), controlPoint1: CGPoint(x: 77.59, y: 30.05), controlPoint2: CGPoint(x: 66.3, y: 25.73))
        bezierPath.addCurve(to: CGPoint(x: 80.42, y: 39.87), controlPoint1: CGPoint(x: 69.56, y: 35.85), controlPoint2: CGPoint(x: 76.59, y: 35.88))
        bezierPath.addCurve(to: CGPoint(x: 83.34, y: 48.49), controlPoint1: CGPoint(x: 83.13, y: 42.69), controlPoint2: CGPoint(x: 83.75, y: 46.34))
        bezierPath.addCurve(to: CGPoint(x: 52.86, y: 59.87), controlPoint1: CGPoint(x: 81.67, y: 57.11), controlPoint2: CGPoint(x: 67.85, y: 65.92))
        bezierPath.addCurve(to: CGPoint(x: 33.52, y: 28.23), controlPoint1: CGPoint(x: 37.87, y: 53.81), controlPoint2: CGPoint(x: 29.21, y: 39.64))
        bezierPath.addCurve(to: CGPoint(x: 43.81, y: 17.93), controlPoint1: CGPoint(x: 35.29, y: 23.51), controlPoint2: CGPoint(x: 39.01, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 44.21, y: 17.76), controlPoint1: CGPoint(x: 43.94, y: 17.87), controlPoint2: CGPoint(x: 44.07, y: 17.82))
        bezierPath.addCurve(to: CGPoint(x: 58.12, y: 15.95), controlPoint1: CGPoint(x: 48.27, y: 16.1), controlPoint2: CGPoint(x: 53.07, y: 15.45))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()
    }

    open class func drawUndo() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)

        //// Group
        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbol2Rect)
        context.translateBy(x: symbol2Rect.origin.x, y: symbol2Rect.origin.y)

        RocketPaintStyleKit.drawBGOvalSolid()
        context.restoreGState()


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 42.72, y: 48.04)
        context.rotate(by: -150 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 9.94, y: -0))
        polygonPath.addLine(to: CGPoint(x: 18.54, y: 15.98))
        polygonPath.addLine(to: CGPoint(x: 1.33, y: 15.98))
        polygonPath.close()
        utilityIconColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 80.65, y: 38.82))
        bezier4Path.addCurve(to: CGPoint(x: 57.65, y: 62.58), controlPoint1: CGPoint(x: 80.65, y: 51.94), controlPoint2: CGPoint(x: 70.35, y: 62.58))
        bezier4Path.addCurve(to: CGPoint(x: 46.74, y: 59.74), controlPoint1: CGPoint(x: 53.7, y: 62.58), controlPoint2: CGPoint(x: 49.98, y: 61.55))
        bezier4Path.addCurve(to: CGPoint(x: 50.89, y: 51.33), controlPoint1: CGPoint(x: 48.41, y: 56.47), controlPoint2: CGPoint(x: 49.78, y: 53.69))
        bezier4Path.addCurve(to: CGPoint(x: 57.65, y: 53.15), controlPoint1: CGPoint(x: 52.89, y: 52.49), controlPoint2: CGPoint(x: 55.2, y: 53.15))
        bezier4Path.addCurve(to: CGPoint(x: 71.52, y: 38.82), controlPoint1: CGPoint(x: 65.31, y: 53.15), controlPoint2: CGPoint(x: 71.52, y: 46.73))
        bezier4Path.addCurve(to: CGPoint(x: 57.65, y: 24.49), controlPoint1: CGPoint(x: 71.52, y: 30.91), controlPoint2: CGPoint(x: 65.31, y: 24.49))
        bezier4Path.addCurve(to: CGPoint(x: 49.39, y: 27.3), controlPoint1: CGPoint(x: 54.56, y: 24.49), controlPoint2: CGPoint(x: 51.7, y: 25.54))
        bezier4Path.addCurve(to: CGPoint(x: 45.04, y: 32.84), controlPoint1: CGPoint(x: 47.53, y: 28.73), controlPoint2: CGPoint(x: 46.02, y: 30.64))
        bezier4Path.addCurve(to: CGPoint(x: 36.82, y: 28.73), controlPoint1: CGPoint(x: 42.43, y: 31.54), controlPoint2: CGPoint(x: 39.59, y: 30.11))
        bezier4Path.addCurve(to: CGPoint(x: 42.45, y: 20.99), controlPoint1: CGPoint(x: 38.17, y: 25.76), controlPoint2: CGPoint(x: 40.1, y: 23.13))
        bezier4Path.addCurve(to: CGPoint(x: 44.61, y: 19.25), controlPoint1: CGPoint(x: 43.14, y: 20.36), controlPoint2: CGPoint(x: 43.86, y: 19.78))
        bezier4Path.addCurve(to: CGPoint(x: 57.65, y: 15.06), controlPoint1: CGPoint(x: 48.31, y: 16.6), controlPoint2: CGPoint(x: 52.81, y: 15.06))
        bezier4Path.addCurve(to: CGPoint(x: 80.65, y: 38.82), controlPoint1: CGPoint(x: 70.35, y: 15.06), controlPoint2: CGPoint(x: 80.65, y: 25.7))
        bezier4Path.close()
        utilityIconColor.setFill()
        bezier4Path.fill()
    }

    open class func drawRedo() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)

        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbol2Rect)
        context.translateBy(x: symbol2Rect.origin.x, y: symbol2Rect.origin.y)

        RocketPaintStyleKit.drawBGOvalSolid()
        context.restoreGState()


        //// Group
        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 83.44, y: 53.89)
        context.rotate(by: 150 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -4.22, y: 9.68))
        polygonPath.addLine(to: CGPoint(x: -13.08, y: 26.09))
        polygonPath.addLine(to: CGPoint(x: 4.65, y: 26.09))
        polygonPath.close()
        utilityIconColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 35, y: 38.82))
        bezier4Path.addCurve(to: CGPoint(x: 58, y: 62.58), controlPoint1: CGPoint(x: 35, y: 51.94), controlPoint2: CGPoint(x: 45.3, y: 62.58))
        bezier4Path.addCurve(to: CGPoint(x: 68.91, y: 59.74), controlPoint1: CGPoint(x: 61.95, y: 62.58), controlPoint2: CGPoint(x: 65.67, y: 61.55))
        bezier4Path.addCurve(to: CGPoint(x: 64.76, y: 51.33), controlPoint1: CGPoint(x: 67.23, y: 56.47), controlPoint2: CGPoint(x: 65.87, y: 53.69))
        bezier4Path.addCurve(to: CGPoint(x: 58, y: 53.15), controlPoint1: CGPoint(x: 62.76, y: 52.49), controlPoint2: CGPoint(x: 60.45, y: 53.15))
        bezier4Path.addCurve(to: CGPoint(x: 44.13, y: 38.82), controlPoint1: CGPoint(x: 50.34, y: 53.15), controlPoint2: CGPoint(x: 44.13, y: 46.73))
        bezier4Path.addCurve(to: CGPoint(x: 58, y: 24.49), controlPoint1: CGPoint(x: 44.13, y: 30.91), controlPoint2: CGPoint(x: 50.34, y: 24.49))
        bezier4Path.addCurve(to: CGPoint(x: 66.26, y: 27.3), controlPoint1: CGPoint(x: 61.09, y: 24.49), controlPoint2: CGPoint(x: 63.95, y: 25.54))
        bezier4Path.addCurve(to: CGPoint(x: 70.61, y: 32.84), controlPoint1: CGPoint(x: 68.12, y: 28.73), controlPoint2: CGPoint(x: 69.63, y: 30.64))
        bezier4Path.addCurve(to: CGPoint(x: 78.83, y: 28.73), controlPoint1: CGPoint(x: 73.22, y: 31.54), controlPoint2: CGPoint(x: 76.06, y: 30.11))
        bezier4Path.addCurve(to: CGPoint(x: 73.2, y: 20.99), controlPoint1: CGPoint(x: 77.48, y: 25.76), controlPoint2: CGPoint(x: 75.55, y: 23.13))
        bezier4Path.addCurve(to: CGPoint(x: 71.04, y: 19.25), controlPoint1: CGPoint(x: 72.51, y: 20.36), controlPoint2: CGPoint(x: 71.79, y: 19.78))
        bezier4Path.addCurve(to: CGPoint(x: 58, y: 15.06), controlPoint1: CGPoint(x: 67.33, y: 16.6), controlPoint2: CGPoint(x: 62.84, y: 15.06))
        bezier4Path.addCurve(to: CGPoint(x: 35, y: 38.82), controlPoint1: CGPoint(x: 45.3, y: 15.06), controlPoint2: CGPoint(x: 35, y: 25.7))
        bezier4Path.close()
        utilityIconColor.setFill()
        bezier4Path.fill()
    }

    open class func drawLoadFromPhotosOld() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let _20Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)

        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(roundedRect: CGRect(x: 15, y: 12, width: 85, height: 96), cornerRadius: 5)
        _20Black.setFill()
        rectangle7Path.fill()


        //// Group 2
        //// Group
        context.saveGState()
        context.translateBy(x: 79.89, y: 71)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)



        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 16.32, y: 55.68)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -6, y: 9.68))
        polygonPath.addLine(to: CGPoint(x: -18.61, y: 31.85))
        polygonPath.addLine(to: CGPoint(x: 6.62, y: 31.85))
        polygonPath.close()
        utilityIconColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 15.89, y: -4, width: 12, height: 28))
        utilityIconColor.setFill()
        rectangle4Path.fill()



        context.restoreGState()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 30, y: 87, width: 56, height: 7), cornerRadius: 3.5)
        utilityIconColor.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 30, y: 78, width: 56, height: 7), cornerRadius: 3.5)
        utilityIconColor.setFill()
        rectangle6Path.fill()
    }

    open class func drawPaletteColor(paletteItemColor: UIColor = UIColor(red: 0.541, green: 1.000, blue: 0.745, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Shadow Declarations
        let paletteOuter = NSShadow()
        paletteOuter.shadowColor = UIColor.black.withAlphaComponent(0.25)
        paletteOuter.shadowOffset = CGSize(width: 3.1, height: 3.1)
        paletteOuter.shadowBlurRadius = 5

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 69, height: 54))
        context.saveGState()
        context.setShadow(offset: paletteOuter.shadowOffset, blur: paletteOuter.shadowBlurRadius, color: (paletteOuter.shadowColor as! UIColor).cgColor)
        paletteItemColor.setFill()
        ovalPath.fill()
        context.restoreGState()
    }

    open class func drawHamburger() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)

        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbol2Rect)
        context.translateBy(x: symbol2Rect.origin.x, y: symbol2Rect.origin.y)

        RocketPaintStyleKit.drawBGOvalSolid()
        context.restoreGState()


        //// Group
        //// Group 2
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 39, y: 19, width: 17, height: 18), cornerRadius: 1)
        utilityIconColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 60, y: 19, width: 17, height: 18), cornerRadius: 1)
        utilityIconColor.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 60, y: 40, width: 17, height: 18), cornerRadius: 1)
        utilityIconColor.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 39, y: 40, width: 17, height: 18), cornerRadius: 1)
        utilityIconColor.setFill()
        rectangle6Path.fill()
    }

    open class func drawBGOvalGrid() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let ovalBG = UIColor(red: 0.468, green: 0.487, blue: 0.799, alpha: 0.394)
        let ovalOutline = UIColor(red: 0.477, green: 0.546, blue: 0.720, alpha: 0.233)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.white.withAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 112, height: 74))
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        ovalBG.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        context.saveGState()
        context.clip(to: ovalPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((ovalInner.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: ovalInner.shadowOffset, blur: ovalInner.shadowBlurRadius, color: ovalOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()

        ovalOutline.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()
    }

    open class func drawBGOvalSolid() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let ovalBG = UIColor(red: 0.468, green: 0.487, blue: 0.799, alpha: 0.394)
        let ovalOutline = UIColor(red: 0.477, green: 0.546, blue: 0.720, alpha: 0.233)

        //// Shadow Declarations
        let ovalInner = NSShadow()
        ovalInner.shadowColor = UIColor.white.withAlphaComponent(0.88)
        ovalInner.shadowOffset = CGSize(width: 10.1, height: 3.1)
        ovalInner.shadowBlurRadius = 70
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 112, height: 74))
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        ovalBG.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        context.saveGState()
        context.clip(to: ovalPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((ovalInner.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let ovalOpaqueShadow = (ovalInner.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: ovalInner.shadowOffset, blur: ovalInner.shadowBlurRadius, color: ovalOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()

        ovalOutline.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()
    }

    open class func drawBGOvalWire() {
        //// Color Declarations
        let pickerOvalShade = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.197)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 112, height: 74))
        pickerOvalShade.setFill()
        ovalPath.fill()
    }

    open class func drawWPen(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalWire()
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 34.52, y: 20.32))
        bezierPath.addCurve(to: CGPoint(x: 46.7, y: 37.91), controlPoint1: CGPoint(x: 20.71, y: 60.04), controlPoint2: CGPoint(x: 46.7, y: 37.91))
        bezierPath.addCurve(to: CGPoint(x: 64.09, y: 48.79), controlPoint1: CGPoint(x: 46.7, y: 37.91), controlPoint2: CGPoint(x: 65.86, y: 17.96))
        bezierPath.addCurve(to: CGPoint(x: 80.4, y: 57.86), controlPoint1: CGPoint(x: 62.32, y: 79.63), controlPoint2: CGPoint(x: 80.4, y: 57.86))
        bezierPath.lineCapStyle = .round;

        iconColor.setStroke()
        bezierPath.lineWidth = lineWidth
        bezierPath.stroke()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 34.41, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 78, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 80.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()
    }

    open class func drawWLine(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalWire()
        context.restoreGState()


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 33.83, y: 19.96))
        bezierPath.addCurve(to: CGPoint(x: 81.58, y: 58.04), controlPoint1: CGPoint(x: 81.58, y: 58.04), controlPoint2: CGPoint(x: 81.58, y: 58.04))
        bezierPath.lineCapStyle = .round;

        iconColor.setStroke()
        bezierPath.lineWidth = lineWidth
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 78, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 80.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 34.71, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        oval2Path.fill()

        context.restoreGState()
    }

    open class func drawWTextSans(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Variable Declarations
        let lineWidthTextSize: CGFloat = 5 + lineWidth * 2

        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalWire()
        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 82.58, y: 57.68)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        textBoxOutline.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        context.restoreGState()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 36, y: 19, width: 84, height: 63)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left

        let textFontAttributes = [convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont.systemFont(ofSize: lineWidthTextSize), convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): iconColor, convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): textStyle]

        "Aa".draw(in: textRect.insetBy(dx: 0, dy: 2), withAttributes: convertToOptionalNSAttributedStringKeyDictionary(textFontAttributes))
    }

    open class func drawWTextSerif(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Variable Declarations
        let lineWidthTextSize: CGFloat = 5 + lineWidth * 2

        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalWire()
        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 82.58, y: 57.68)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        textBoxOutline.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        context.restoreGState()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 78, y: 56.5, width: 9, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 1.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 36, y: 20, width: 84, height: 62)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left

        let textFontAttributes = [convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "Georgia", size: lineWidthTextSize)!, convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): iconColor, convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): textStyle]

        "Aa".draw(in: textRect.insetBy(dx: 0, dy: 1), withAttributes: convertToOptionalNSAttributedStringKeyDictionary(textFontAttributes))
    }

    open class func drawWRectSolid(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalWire()
        context.restoreGState()


        //// Group
        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 83.58, y: 57.68)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        iconColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 80, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 82.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 34.95, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        oval2Path.fill()

        context.restoreGState()
    }

    open class func drawWRectOutline(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalWire()
        context.restoreGState()


        //// Group
        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 81.58, y: 54.68)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 44.15, height: 31.36))
        iconColor.setStroke()
        rectangle2Path.lineWidth = lineWidth
        rectangle2Path.stroke()

        context.restoreGState()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 80, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 82.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 34.95, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        oval2Path.fill()

        context.restoreGState()
    }

    open class func drawWEllipseSolid(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalWire()
        context.restoreGState()


        //// Group
        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 80, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 82.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 34.95, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        oval2Path.fill()

        context.restoreGState()




        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 35, y: 21, width: 49, height: 37))
        iconColor.setFill()
        ovalPath.fill()
    }

    open class func drawWEllipseOutline(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalWire()
        context.restoreGState()


        //// Group
        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 80, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 82.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 34.95, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        oval2Path.fill()

        context.restoreGState()




        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 36, y: 20, width: 47, height: 37))
        iconColor.setStroke()
        ovalPath.lineWidth = lineWidth
        ovalPath.stroke()
    }

    open class func drawGTextSans(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Variable Declarations
        let lineWidthTextSize: CGFloat = 5 + lineWidth * 2

        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalGrid()
        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 82.58, y: 57.68)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        textBoxOutline.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        context.restoreGState()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 79, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 36, y: 19, width: 84, height: 63)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left

        let textFontAttributes = [convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont.systemFont(ofSize: lineWidthTextSize), convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): iconColor, convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): textStyle]

        "Aa".draw(in: textRect.insetBy(dx: 0, dy: 2), withAttributes: convertToOptionalNSAttributedStringKeyDictionary(textFontAttributes))
    }

    open class func drawGEllipseSolid(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalGrid()
        context.restoreGState()


        //// Group
        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 80, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 82.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 34.95, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        oval2Path.fill()

        context.restoreGState()




        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 35, y: 21, width: 49, height: 37))
        iconColor.setFill()
        ovalPath.fill()
    }

    open class func drawGPen(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalGrid()
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 34.52, y: 20.32))
        bezierPath.addCurve(to: CGPoint(x: 46.7, y: 37.91), controlPoint1: CGPoint(x: 20.71, y: 60.04), controlPoint2: CGPoint(x: 46.7, y: 37.91))
        bezierPath.addCurve(to: CGPoint(x: 64.09, y: 48.79), controlPoint1: CGPoint(x: 46.7, y: 37.91), controlPoint2: CGPoint(x: 65.86, y: 17.96))
        bezierPath.addCurve(to: CGPoint(x: 80.4, y: 57.86), controlPoint1: CGPoint(x: 62.32, y: 79.63), controlPoint2: CGPoint(x: 80.4, y: 57.86))
        bezierPath.lineCapStyle = .round;

        iconColor.setStroke()
        bezierPath.lineWidth = lineWidth
        bezierPath.stroke()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 34.41, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 78, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 80.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()
    }

    open class func drawGTextSerif(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Variable Declarations
        let lineWidthTextSize: CGFloat = 5 + lineWidth * 2

        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalGrid()
        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 82.58, y: 57.68)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        textBoxOutline.setStroke()
        rectangle2Path.lineWidth = 2
        rectangle2Path.stroke()

        context.restoreGState()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 78, y: 56.5, width: 9, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 81.5, y: 53, width: 1.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Text Drawing
        let textRect = CGRect(x: 36, y: 20, width: 84, height: 62)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left

        let textFontAttributes = [convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "Georgia", size: lineWidthTextSize)!, convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): iconColor, convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): textStyle]

        "Aa".draw(in: textRect.insetBy(dx: 0, dy: 1), withAttributes: convertToOptionalNSAttributedStringKeyDictionary(textFontAttributes))
    }

    open class func drawGRectOutline(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalGrid()
        context.restoreGState()


        //// Group
        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 81.58, y: 54.68)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 44.15, height: 31.36))
        iconColor.setStroke()
        rectangle2Path.lineWidth = lineWidth
        rectangle2Path.stroke()

        context.restoreGState()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 80, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 82.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 34.95, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        oval2Path.fill()

        context.restoreGState()
    }

    open class func drawGLine(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalGrid()
        context.restoreGState()


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 33.83, y: 19.96))
        bezierPath.addCurve(to: CGPoint(x: 81.58, y: 58.04), controlPoint1: CGPoint(x: 81.58, y: 58.04), controlPoint2: CGPoint(x: 81.58, y: 58.04))
        bezierPath.lineCapStyle = .round;

        iconColor.setStroke()
        bezierPath.lineWidth = lineWidth
        bezierPath.stroke()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 78, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 80.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 34.71, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        oval2Path.fill()

        context.restoreGState()
    }

    open class func drawGRectSolid(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalGrid()
        context.restoreGState()


        //// Group
        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 83.58, y: 57.68)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 49.15, height: 37.36))
        iconColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 80, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 82.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 34.95, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        oval2Path.fill()

        context.restoreGState()
    }

    open class func drawGEllipseOutline(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let textBoxOutline = UIColor(red: 1.000, green: 0.996, blue: 0.977, alpha: 0.850)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 120, height: 82)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        RocketPaintStyleKit.drawBGOvalGrid()
        context.restoreGState()


        //// Group
        //// Cross
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 80, y: 56.5, width: 8, height: 1.5))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 82.5, y: 53, width: 2.5, height: 9))
        UIColor.white.setFill()
        rectangle3Path.fill()




        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 34.95, y: 18.04)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 3.51, height: 3.51))
        textBoxOutline.setFill()
        oval2Path.fill()

        context.restoreGState()




        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 36, y: 20, width: 47, height: 37))
        iconColor.setStroke()
        ovalPath.lineWidth = lineWidth
        ovalPath.stroke()
    }

    open class func drawSavePlus() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let _20Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)

        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(roundedRect: CGRect(x: 80, y: 68, width: 85, height: 96), cornerRadius: 5)
        _20Black.setFill()
        rectangle7Path.fill()


        //// Group 2
        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 115.84, y: 144.73)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -6.96, y: 9.68))
        polygonPath.addLine(to: CGPoint(x: -21.6, y: 35.44))
        polygonPath.addLine(to: CGPoint(x: 7.68, y: 35.44))
        polygonPath.close()
        utilityIconColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 116, y: 78, width: 15, height: 33))
        utilityIconColor.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 90, y: 146, width: 65, height: 8), cornerRadius: 4)
        utilityIconColor.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 90, y: 135, width: 65, height: 8), cornerRadius: 4)
        utilityIconColor.setFill()
        rectangle6Path.fill()
    }

    open class func drawClearX() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let utilityIconFaded = utilityIconColor.withAlphaComponent(0.5)

        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 220.06, y: 14.28)
        context.rotate(by: 45 * CGFloat(M_PI) / 180)

        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 8, height: 290), cornerRadius: 2)
        utilityIconFaded.setFill()
        rectanglePath.fill()

        context.restoreGState()
    }

    open class func drawSliderLineWidth(sliderFrame: CGRect = CGRect(x: 25, y: 41, width: 445, height: 20), iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let maximumTrackColor = UIColor(red: 0.522, green: 0.522, blue: 0.522, alpha: 1.000)

        //// Variable Declarations
        let lineWidthSliderScale: CGFloat = (6 + lineWidth * 3) / 20.0


        //// Subframes
        let track: CGRect = CGRect(x: sliderFrame.minX, y: sliderFrame.minY + floor((sliderFrame.height - 4) * 0.50000 + 0.5), width: sliderFrame.width, height: 4)
        let trackFrame = CGRect(x: track.minX + floor(track.width * 0.00000 + 0.5), y: track.minY, width: floor(track.width * 1.00000 + 0.5) - floor(track.width * 0.00000 + 0.5), height: 4)


        //// Track
        //// Minimum Track Drawing
        let minimumTrackPath = UIBezierPath(roundedRect: CGRect(x: trackFrame.minX, y: trackFrame.minY + trackFrame.height - 4, width: floor((trackFrame.width) * 0.75955 + 0.5), height: 4), byRoundingCorners: [UIRectCorner.topLeft, UIRectCorner.bottomLeft], cornerRadii: CGSize(width: 2, height: 2))
        minimumTrackPath.close()
        iconColor.setFill()
        minimumTrackPath.fill()


        //// Maximum Track Drawing
        let maximumTrackPath = UIBezierPath(roundedRect: CGRect(x: trackFrame.minX + floor((trackFrame.width) * 0.75955 + 0.5), y: trackFrame.minY + trackFrame.height - 4, width: trackFrame.width - floor((trackFrame.width) * 0.75955 + 0.5), height: 4), byRoundingCorners: [UIRectCorner.topRight, UIRectCorner.bottomRight], cornerRadii: CGSize(width: 2, height: 2))
        maximumTrackPath.close()
        maximumTrackColor.setFill()
        maximumTrackPath.fill()




        //// Thumb Drawing
        context.saveGState()
        context.translateBy(x: sliderFrame.maxX - 104.7, y: sliderFrame.maxY - 10)
        context.scaleBy(x: lineWidthSliderScale, y: lineWidthSliderScale)

        let thumbPath = UIBezierPath(ovalIn: CGRect(x: -7.3, y: -7.3, width: 14.6, height: 14.6))
        iconColor.setFill()
        thumbPath.fill()

        context.restoreGState()


        //// Crescendo Drawing
        let crescendoPath = UIBezierPath()
        crescendoPath.move(to: CGPoint(x: 25.5, y: 38.5))
        crescendoPath.addLine(to: CGPoint(x: 469.5, y: 38.5))
        crescendoPath.addLine(to: CGPoint(x: 469.5, y: 9.5))
        crescendoPath.addLine(to: CGPoint(x: 25.5, y: 38.5))
        crescendoPath.close()
        UIColor.gray.setFill()
        crescendoPath.fill()
        UIColor.black.setStroke()
        crescendoPath.lineWidth = 1
        crescendoPath.stroke()
    }

    open class func drawSliderLineAlpha(sliderFrame: CGRect = CGRect(x: 25, y: 41, width: 445, height: 20), iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000), lineWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let maximumTrackColor = UIColor(red: 0.522, green: 0.522, blue: 0.522, alpha: 1.000)

        //// Variable Declarations
        let lineWidthSliderScale: CGFloat = (6 + lineWidth * 3) / 20.0


        //// Subframes
        let track: CGRect = CGRect(x: sliderFrame.minX, y: sliderFrame.minY + floor((sliderFrame.height - 4) * 0.50000 + 0.5), width: sliderFrame.width, height: 4)
        let trackFrame = CGRect(x: track.minX + floor(track.width * 0.00000 + 0.5), y: track.minY, width: floor(track.width * 1.00000 + 0.5) - floor(track.width * 0.00000 + 0.5), height: 4)


        //// Track
        //// Minimum Track Drawing
        let minimumTrackPath = UIBezierPath(roundedRect: CGRect(x: trackFrame.minX, y: trackFrame.minY + trackFrame.height - 4, width: floor((trackFrame.width) * 0.75955 + 0.5), height: 4), byRoundingCorners: [UIRectCorner.topLeft, UIRectCorner.bottomLeft], cornerRadii: CGSize(width: 2, height: 2))
        minimumTrackPath.close()
        iconColor.setFill()
        minimumTrackPath.fill()


        //// Maximum Track Drawing
        let maximumTrackPath = UIBezierPath(roundedRect: CGRect(x: trackFrame.minX + floor((trackFrame.width) * 0.75955 + 0.5), y: trackFrame.minY + trackFrame.height - 4, width: trackFrame.width - floor((trackFrame.width) * 0.75955 + 0.5), height: 4), byRoundingCorners: [UIRectCorner.topRight, UIRectCorner.bottomRight], cornerRadii: CGSize(width: 2, height: 2))
        maximumTrackPath.close()
        maximumTrackColor.setFill()
        maximumTrackPath.fill()




        //// Thumb Drawing
        context.saveGState()
        context.translateBy(x: sliderFrame.maxX - 104.7, y: sliderFrame.maxY - 10)
        context.scaleBy(x: lineWidthSliderScale, y: lineWidthSliderScale)

        let thumbPath = UIBezierPath(ovalIn: CGRect(x: -7.3, y: -7.3, width: 14.6, height: 14.6))
        iconColor.setFill()
        thumbPath.fill()

        context.restoreGState()
    }

    open class func drawClearWhite() {
        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let _20Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)
        let _10Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.100)

        //// Background Shade Drawing
        let backgroundShadePath = UIBezierPath(roundedRect: CGRect(x: 15, y: 12, width: 85, height: 96), cornerRadius: 5)
        _20Black.setFill()
        backgroundShadePath.fill()


        //// Group
        //// Can Drawing
        let canPath = UIBezierPath(roundedRect: CGRect(x: 32, y: 41, width: 51, height: 53), byRoundingCorners: [UIRectCorner.bottomLeft, UIRectCorner.bottomRight], cornerRadii: CGSize(width: 3, height: 3))
        canPath.close()
        utilityIconColor.setFill()
        canPath.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 41, y: 51, width: 7, height: 35), cornerRadius: 2)
        _10Black.setFill()
        rectangle6Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 54, y: 51, width: 7, height: 35), cornerRadius: 2)
        _10Black.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 67, y: 51, width: 7, height: 35), cornerRadius: 2)
        _10Black.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 28, y: 33, width: 59, height: 7), cornerRadius: 2)
        utilityIconColor.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 51, y: 26, width: 14, height: 10), cornerRadius: 2)
        utilityIconColor.setStroke()
        rectangle4Path.lineWidth = 6
        rectangle4Path.stroke()
    }

    open class func drawClearColor(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000)) {
        //// Color Declarations
        let _20Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)
        let _10Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.100)

        //// Background Shade Drawing
        let backgroundShadePath = UIBezierPath(roundedRect: CGRect(x: 15, y: 12, width: 85, height: 96), cornerRadius: 5)
        _20Black.setFill()
        backgroundShadePath.fill()


        //// Group
        //// Can Drawing
        let canPath = UIBezierPath(roundedRect: CGRect(x: 32, y: 41, width: 51, height: 53), byRoundingCorners: [UIRectCorner.bottomLeft, UIRectCorner.bottomRight], cornerRadii: CGSize(width: 3, height: 3))
        canPath.close()
        iconColor.setFill()
        canPath.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 41, y: 51, width: 7, height: 35), cornerRadius: 2)
        _10Black.setFill()
        rectangle6Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 54, y: 51, width: 7, height: 35), cornerRadius: 2)
        _10Black.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 67, y: 51, width: 7, height: 35), cornerRadius: 2)
        _10Black.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 28, y: 33, width: 59, height: 7), cornerRadius: 2)
        iconColor.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 51, y: 26, width: 14, height: 10), cornerRadius: 2)
        iconColor.setStroke()
        rectangle4Path.lineWidth = 6
        rectangle4Path.stroke()
    }

    open class func drawCanvas1() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(), colors: [UIColor.black.cgColor, UIColor.white.cgColor] as CFArray, locations: [0, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 12, y: 16, width: 174, height: 167))
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 99, y: 16), end: CGPoint(x: 99, y: 183), options: CGGradientDrawingOptions())
        context.restoreGState()
    }

    open class func drawSaveToPhotosOld() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let _20Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)

        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(roundedRect: CGRect(x: 15, y: 12, width: 85, height: 96), cornerRadius: 5)
        _20Black.setFill()
        rectangle7Path.fill()


        //// Group 2
        //// Group
        context.saveGState()
        context.translateBy(x: 35.89, y: 28)



        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 16.32, y: 55.68)
        context.rotate(by: -180 * CGFloat(M_PI) / 180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -6, y: 9.68))
        polygonPath.addLine(to: CGPoint(x: -18.61, y: 31.85))
        polygonPath.addLine(to: CGPoint(x: 6.62, y: 31.85))
        polygonPath.close()
        utilityIconColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 15.89, y: -4, width: 12, height: 28))
        utilityIconColor.setFill()
        rectangle4Path.fill()



        context.restoreGState()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 30, y: 87, width: 56, height: 7), cornerRadius: 3.5)
        utilityIconColor.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 30, y: 78, width: 56, height: 7), cornerRadius: 3.5)
        utilityIconColor.setFill()
        rectangle6Path.fill()
    }

    open class func drawLoadFromPhotos() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let _20Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)

        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(roundedRect: CGRect(x: 10, y: 7, width: 59, height: 86), cornerRadius: 5)
        _20Black.setFill()
        rectangle7Path.fill()


        //// Camera
        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 24, y: 62, width: 31, height: 21), cornerRadius: 2)
        utilityIconColor.setFill()
        rectangle5Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 32, y: 65, width: 15, height: 15))
        UIColor.lightGray.setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 32, y: 57, width: 15, height: 5), byRoundingCorners: [UIRectCorner.topLeft, UIRectCorner.topRight], cornerRadii: CGSize(width: 2, height: 2))
        rectanglePath.close()
        utilityIconColor.setFill()
        rectanglePath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 34, y: 67, width: 11, height: 11))
        utilityIconColor.setFill()
        oval2Path.fill()




        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 33.12, y: 6.82)
        context.rotate(by: 180 * CGFloat(M_PI) / 180)
        context.scaleBy(x: 1, y: -1)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -6.38, y: 9.68))
        polygonPath.addLine(to: CGPoint(x: -19.8, y: 26.93))
        polygonPath.addLine(to: CGPoint(x: 7.04, y: 26.93))
        polygonPath.close()
        utilityIconColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 34, y: 55)
        context.scaleBy(x: 1, y: -1)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 11, height: 22))
        utilityIconColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()
    }

    open class func drawSaveToPhotos() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let utilityIconColor = UIColor(red: 0.927, green: 0.927, blue: 0.927, alpha: 1.000)
        let _20Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)

        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(roundedRect: CGRect(x: 10, y: 7, width: 59, height: 86), cornerRadius: 5)
        _20Black.setFill()
        rectangle7Path.fill()


        //// Camera
        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 24, y: 62, width: 31, height: 21), cornerRadius: 2)
        utilityIconColor.setFill()
        rectangle5Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 32, y: 65, width: 15, height: 15))
        UIColor.lightGray.setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 32, y: 57, width: 15, height: 5), byRoundingCorners: [UIRectCorner.topLeft, UIRectCorner.topRight], cornerRadii: CGSize(width: 2, height: 2))
        rectanglePath.close()
        utilityIconColor.setFill()
        rectanglePath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 34, y: 67, width: 11, height: 11))
        utilityIconColor.setFill()
        oval2Path.fill()




        //// Group
        context.saveGState()
        context.translateBy(x: 24, y: 55.5)
        context.scaleBy(x: 1, y: -1)



        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 9.12, y: -9.68)
        context.rotate(by: 180 * CGFloat(M_PI) / 180)
        context.scaleBy(x: 1, y: -1)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -6.38, y: 9.68))
        polygonPath.addLine(to: CGPoint(x: -19.8, y: 26.93))
        polygonPath.addLine(to: CGPoint(x: 7.04, y: 26.93))
        polygonPath.close()
        utilityIconColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 10, y: 38.5)
        context.scaleBy(x: 1, y: -1)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 11, height: 22))
        utilityIconColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()



        context.restoreGState()
    }

    open class func drawClearCanvas(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000)) {
        //// Color Declarations
        let _20Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)
        let _10Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.100)

        //// Background Shade Drawing
        let backgroundShadePath = UIBezierPath(roundedRect: CGRect(x: 10, y: 7, width: 59, height: 86), cornerRadius: 5)
        _20Black.setFill()
        backgroundShadePath.fill()


        //// Group
        //// Can Drawing
        let canPath = UIBezierPath(roundedRect: CGRect(x: 23, y: 39, width: 33, height: 40), byRoundingCorners: [UIRectCorner.bottomLeft, UIRectCorner.bottomRight], cornerRadii: CGSize(width: 3, height: 3))
        canPath.close()
        iconColor.setFill()
        canPath.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 28, y: 43, width: 5, height: 31), cornerRadius: 2)
        _10Black.setFill()
        rectangle6Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 37, y: 43, width: 5, height: 31), cornerRadius: 2)
        _10Black.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 46, y: 43, width: 5, height: 31), cornerRadius: 2)
        _10Black.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 19, y: 32, width: 41, height: 6), cornerRadius: 2)
        iconColor.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 33, y: 26, width: 13, height: 9), cornerRadius: 2)
        iconColor.setStroke()
        rectangle4Path.lineWidth = 6
        rectangle4Path.stroke()
    }

    open class func drawClearCanvas2(iconColor: UIColor = UIColor(red: 0.320, green: 0.729, blue: 0.800, alpha: 1.000)) {
        //// Color Declarations
        let _20Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)
        let _10Black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.100)

        //// Background Shade Drawing
        let backgroundShadePath = UIBezierPath(roundedRect: CGRect(x: 10, y: 7, width: 59, height: 86), cornerRadius: 5)
        _20Black.setFill()
        backgroundShadePath.fill()


        //// Can 2 Drawing
        let can2Path = UIBezierPath(rect: CGRect(x: 17, y: 21, width: 45, height: 60))
        iconColor.setFill()
        can2Path.fill()


        //// Group
        //// Can Drawing
        let canPath = UIBezierPath(roundedRect: CGRect(x: 27, y: 40, width: 26, height: 32), byRoundingCorners: [UIRectCorner.bottomLeft, UIRectCorner.bottomRight], cornerRadii: CGSize(width: 3, height: 3))
        canPath.close()
        _10Black.setFill()
        canPath.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 31, y: 43, width: 4, height: 25), cornerRadius: 2)
        _10Black.setFill()
        rectangle6Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 38, y: 43, width: 4, height: 25), cornerRadius: 2)
        _10Black.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 45, y: 43, width: 4, height: 25), cornerRadius: 2)
        _10Black.setFill()
        rectangle2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 44, y: 30.09))
        bezierPath.addCurve(to: CGPoint(x: 44.96, y: 31), controlPoint1: CGPoint(x: 44.49, y: 30.27), controlPoint2: CGPoint(x: 44.81, y: 30.59))
        bezierPath.addCurve(to: CGPoint(x: 45.07, y: 32.42), controlPoint1: CGPoint(x: 45.07, y: 31.38), controlPoint2: CGPoint(x: 45.07, y: 31.73))
        bezierPath.addLine(to: CGPoint(x: 45.07, y: 34.71))
        bezierPath.addLine(to: CGPoint(x: 45.07, y: 34.75))
        bezierPath.addLine(to: CGPoint(x: 53.61, y: 34.75))
        bezierPath.addCurve(to: CGPoint(x: 54.48, y: 34.91), controlPoint1: CGPoint(x: 53.5, y: 34.75), controlPoint2: CGPoint(x: 54.01, y: 34.75))
        bezierPath.addLine(to: CGPoint(x: 54.57, y: 34.93))
        bezierPath.addCurve(to: CGPoint(x: 56, y: 37.01), controlPoint1: CGPoint(x: 55.43, y: 35.25), controlPoint2: CGPoint(x: 56, y: 36.08))
        bezierPath.addCurve(to: CGPoint(x: 56, y: 37.13), controlPoint1: CGPoint(x: 56, y: 37.13), controlPoint2: CGPoint(x: 56, y: 37.13))
        bezierPath.addLine(to: CGPoint(x: 56, y: 37.25))
        bezierPath.addCurve(to: CGPoint(x: 54.57, y: 39.33), controlPoint1: CGPoint(x: 56, y: 38.18), controlPoint2: CGPoint(x: 55.43, y: 39.01))
        bezierPath.addCurve(to: CGPoint(x: 52.46, y: 39.51), controlPoint1: CGPoint(x: 54.01, y: 39.51), controlPoint2: CGPoint(x: 53.5, y: 39.51))
        bezierPath.addLine(to: CGPoint(x: 26.39, y: 39.51))
        bezierPath.addCurve(to: CGPoint(x: 25.52, y: 39.35), controlPoint1: CGPoint(x: 26.5, y: 39.51), controlPoint2: CGPoint(x: 25.99, y: 39.51))
        bezierPath.addLine(to: CGPoint(x: 25.43, y: 39.33))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 37.25), controlPoint1: CGPoint(x: 24.57, y: 39.01), controlPoint2: CGPoint(x: 24, y: 38.18))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 37.13), controlPoint1: CGPoint(x: 24, y: 37.13), controlPoint2: CGPoint(x: 24, y: 37.13))
        bezierPath.addLine(to: CGPoint(x: 24, y: 37.01))
        bezierPath.addCurve(to: CGPoint(x: 25.43, y: 34.93), controlPoint1: CGPoint(x: 24, y: 36.08), controlPoint2: CGPoint(x: 24.57, y: 35.25))
        bezierPath.addCurve(to: CGPoint(x: 26.39, y: 34.77), controlPoint1: CGPoint(x: 25.73, y: 34.84), controlPoint2: CGPoint(x: 26.02, y: 34.79))
        bezierPath.addCurve(to: CGPoint(x: 27.07, y: 34.76), controlPoint1: CGPoint(x: 26.59, y: 34.76), controlPoint2: CGPoint(x: 26.81, y: 34.76))
        bezierPath.addCurve(to: CGPoint(x: 27.54, y: 34.75), controlPoint1: CGPoint(x: 27.21, y: 34.75), controlPoint2: CGPoint(x: 27.37, y: 34.75))
        bezierPath.addLine(to: CGPoint(x: 34.93, y: 34.75))
        bezierPath.addLine(to: CGPoint(x: 34.93, y: 34.71))
        bezierPath.addLine(to: CGPoint(x: 34.93, y: 32.42))
        bezierPath.addCurve(to: CGPoint(x: 35.03, y: 31.06), controlPoint1: CGPoint(x: 34.93, y: 31.73), controlPoint2: CGPoint(x: 34.93, y: 31.38))
        bezierPath.addCurve(to: CGPoint(x: 35.91, y: 30.12), controlPoint1: CGPoint(x: 35.19, y: 30.59), controlPoint2: CGPoint(x: 35.51, y: 30.27))
        bezierPath.addCurve(to: CGPoint(x: 37.27, y: 30), controlPoint1: CGPoint(x: 36.28, y: 30), controlPoint2: CGPoint(x: 36.61, y: 30))
        bezierPath.addLine(to: CGPoint(x: 37.31, y: 30))
        bezierPath.addLine(to: CGPoint(x: 42.69, y: 30))
        bezierPath.addCurve(to: CGPoint(x: 44.03, y: 30.1), controlPoint1: CGPoint(x: 43.37, y: 30), controlPoint2: CGPoint(x: 43.72, y: 30))
        bezierPath.addLine(to: CGPoint(x: 44, y: 30.09))
        bezierPath.close()
        _10Black.setFill()
        bezierPath.fill()
    }

}

// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertFromNSAttributedStringKey(_ input: NSAttributedString.Key) -> String {
	return input.rawValue
}

// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertToOptionalNSAttributedStringKeyDictionary(_ input: [String: Any]?) -> [NSAttributedString.Key: Any]? {
	guard let input = input else { return nil }
	return Dictionary(uniqueKeysWithValues: input.map { key, value in (NSAttributedString.Key(rawValue: key), value)})
}
